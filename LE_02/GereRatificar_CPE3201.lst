

Microchip Technology PIC LITE Macro Assembler V1.33 build 59893 
                                                                                               Wed Feb 07 20:54:50 2024

Microchip Technology Omniscient Code Generator (Lite mode) build 59893
     1                           	processor	16F877A
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	text0,local,class=CODE,merge=1,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	maintext,global,class=CODE,split=1,delta=2
     8                           	psect	text1,local,class=CODE,merge=1,delta=2
     9                           	psect	text2,local,class=CODE,merge=1,delta=2
    10                           	psect	text3,local,class=CODE,merge=1,delta=2
    11                           	psect	text4,local,class=CODE,merge=1,delta=2
    12                           	psect	text5,local,class=CODE,merge=1,delta=2
    13                           	dabs	1,0x7E,2
    14  0000                     	;# 
    15  0001                     	;# 
    16  0002                     	;# 
    17  0003                     	;# 
    18  0004                     	;# 
    19  0005                     	;# 
    20  0006                     	;# 
    21  0007                     	;# 
    22  0008                     	;# 
    23  0009                     	;# 
    24  000A                     	;# 
    25  000B                     	;# 
    26  000C                     	;# 
    27  000D                     	;# 
    28  000E                     	;# 
    29  000E                     	;# 
    30  000F                     	;# 
    31  0010                     	;# 
    32  0011                     	;# 
    33  0012                     	;# 
    34  0013                     	;# 
    35  0014                     	;# 
    36  0015                     	;# 
    37  0015                     	;# 
    38  0016                     	;# 
    39  0017                     	;# 
    40  0018                     	;# 
    41  0019                     	;# 
    42  001A                     	;# 
    43  001B                     	;# 
    44  001B                     	;# 
    45  001C                     	;# 
    46  001D                     	;# 
    47  001E                     	;# 
    48  001F                     	;# 
    49  0081                     	;# 
    50  0085                     	;# 
    51  0086                     	;# 
    52  0087                     	;# 
    53  0088                     	;# 
    54  0089                     	;# 
    55  008C                     	;# 
    56  008D                     	;# 
    57  008E                     	;# 
    58  0091                     	;# 
    59  0092                     	;# 
    60  0093                     	;# 
    61  0094                     	;# 
    62  0098                     	;# 
    63  0099                     	;# 
    64  009C                     	;# 
    65  009D                     	;# 
    66  009E                     	;# 
    67  009F                     	;# 
    68  010C                     	;# 
    69  010D                     	;# 
    70  010E                     	;# 
    71  010F                     	;# 
    72  018C                     	;# 
    73  018D                     	;# 
    74  0006                     _PORTB	set	6
    75  0007                     _PORTC	set	7
    76  0008                     _PORTD	set	8
    77  0044                     _RD4	set	68
    78  0081                     _OPTION_REG	set	129
    79  0086                     _TRISB	set	134
    80  0087                     _TRISC	set	135
    81  0088                     _TRISD	set	136
    82                           
    83                           	psect	text0
    84  0000                     __ptext0:	
    85                           ; #config settings
    86                           
    87                           
    88                           ;psect for function _delay
    89  0000                     
    90                           	psect	cinit
    91  07FC                     start_initialization:	
    92  07FC                     __initialization:	
    93  07FC                     end_of_initialization:	
    94                           ;End of C runtime variable initialization code
    95                           
    96  07FC                     __end_of__initialization:	
    97  07FC  0183               	clrf	3
    98  07FD  120A  118A  2E52   	ljmp	_main	;jump to C main() function
    99                           
   100                           	psect	cstackCOMMON
   101  0070                     __pcstackCOMMON:	
   102  0070                     ?_delay:	
   103  0070                     ?_dataCtrl:	
   104                           ; 0 bytes @ 0x0
   105                           
   106  0070                     ?_initLCD:	
   107                           ; 0 bytes @ 0x0
   108                           
   109  0070                     ?_readKey:	
   110                           ; 0 bytes @ 0x0
   111                           
   112  0070                     ?_main:	
   113                           ; 0 bytes @ 0x0
   114                           
   115  0070                     delay@timeIn:	
   116                           ; 0 bytes @ 0x0
   117                           
   118                           
   119                           ; 2 bytes @ 0x0
   120  0070                     	ds	2
   121  0072                     ??_delay:	
   122                           
   123                           ; 0 bytes @ 0x2
   124  0072                     	ds	1
   125  0073                     delay@j:	
   126                           
   127                           ; 2 bytes @ 0x3
   128  0073                     	ds	2
   129  0075                     ?_instCtrl:	
   130  0075                     ??_dataCtrl:	
   131                           ; 0 bytes @ 0x5
   132                           
   133  0075                     dataCtrl@data_inst_in:	
   134                           ; 0 bytes @ 0x5
   135                           
   136  0075                     instCtrl@instruction_in:	
   137                           ; 1 bytes @ 0x5
   138                           
   139                           
   140                           ; 2 bytes @ 0x5
   141  0075                     	ds	2
   142  0077                     ??_instCtrl:	
   143  0077                     ??_initLCD:	
   144                           ; 0 bytes @ 0x7
   145                           
   146  0077                     ??_readKey:	
   147                           ; 0 bytes @ 0x7
   148                           
   149                           
   150                           ; 0 bytes @ 0x7
   151  0077                     	ds	2
   152  0079                     readKey@bits:	
   153                           
   154                           ; 2 bytes @ 0x9
   155  0079                     	ds	2
   156  007B                     readKey@rowCountIN:	
   157                           
   158                           ; 1 bytes @ 0xB
   159  007B                     	ds	1
   160  007C                     ??_main:	
   161  007C                     main@rowCountIN:	
   162                           ; 0 bytes @ 0xC
   163                           
   164                           
   165                           ; 2 bytes @ 0xC
   166  007C                     	ds	2
   167                           
   168                           	psect	maintext
   169  0652                     __pmaintext:	
   170 ;;
   171 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   172 ;;
   173 ;; *************** function _main *****************
   174 ;; Defined at:
   175 ;;		line 138 in file "C:\Users\notjo\OneDrive\Desktop\USC\USC-Year3-Sem2\3201-EmbeddedSystems\Labs\LE_02\LE2.c"
   176 ;; Parameters:    Size  Location     Type
   177 ;;		None
   178 ;; Auto vars:     Size  Location     Type
   179 ;;  rowCountIN      2   12[COMMON] int 
   180 ;; Return value:  Size  Location     Type
   181 ;;		None               void
   182 ;; Registers used:
   183 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   184 ;; Tracked objects:
   185 ;;		On entry : 17F/0
   186 ;;		On exit  : 0/0
   187 ;;		Unchanged: 0/0
   188 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   189 ;;      Params:         0       0       0       0       0
   190 ;;      Locals:         2       0       0       0       0
   191 ;;      Temps:          0       0       0       0       0
   192 ;;      Totals:         2       0       0       0       0
   193 ;;Total ram usage:        2 bytes
   194 ;; Hardware stack levels required when called:    3
   195 ;; This function calls:
   196 ;;		_initLCD
   197 ;;		_readKey
   198 ;; This function is called by:
   199 ;;		Startup code after reset
   200 ;; This function uses a non-reentrant model
   201 ;;
   202                           
   203                           
   204                           ;psect for function _main
   205  0652                     _main:	
   206                           
   207                           ;LE2.c: 144: int rowCountIN = 0;
   208                           
   209                           ;incstack = 0
   210                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   211  0652  01FC               	clrf	main@rowCountIN
   212  0653  01FD               	clrf	main@rowCountIN+1
   213                           
   214                           ;LE2.c: 146: OPTION_REG = 0xC0;
   215  0654  30C0               	movlw	192
   216  0655  1683               	bsf	3,5	;RP0=1, select bank1
   217  0656  1303               	bcf	3,6	;RP1=0, select bank1
   218  0657  0081               	movwf	1	;volatile
   219                           
   220                           ;LE2.c: 147: TRISB = 0x00;
   221  0658  0186               	clrf	6	;volatile
   222                           
   223                           ;LE2.c: 148: TRISC = 0x00;
   224  0659  0187               	clrf	7	;volatile
   225                           
   226                           ;LE2.c: 149: PORTB = 0x00;
   227  065A  1283               	bcf	3,5	;RP0=0, select bank0
   228  065B  1303               	bcf	3,6	;RP1=0, select bank0
   229  065C  0186               	clrf	6	;volatile
   230                           
   231                           ;LE2.c: 150: PORTC = 0x00;
   232  065D  0187               	clrf	7	;volatile
   233                           
   234                           ;LE2.c: 153: TRISD = 0xFF;
   235  065E  30FF               	movlw	255
   236  065F  1683               	bsf	3,5	;RP0=1, select bank1
   237  0660  1303               	bcf	3,6	;RP1=0, select bank1
   238  0661  0088               	movwf	8	;volatile
   239                           
   240                           ;LE2.c: 154: PORTD = 0xFF;
   241  0662  30FF               	movlw	255
   242  0663  1283               	bcf	3,5	;RP0=0, select bank0
   243  0664  1303               	bcf	3,6	;RP1=0, select bank0
   244  0665  0088               	movwf	8	;volatile
   245                           
   246                           ;LE2.c: 155: initLCD();
   247  0666  120A  118A  26C8  120A  118A  	fcall	_initLCD
   248  066B                     l628:	
   249                           ;LE2.c: 156: while (1)
   250                           
   251                           
   252                           ;LE2.c: 157: {
   253                           ;LE2.c: 158: if(RD4 == 1)
   254  066B  1283               	bcf	3,5	;RP0=0, select bank0
   255  066C  1303               	bcf	3,6	;RP1=0, select bank0
   256  066D  1E08               	btfss	8,4	;volatile
   257  066E  2E6B               	goto	l628
   258                           
   259                           ;LE2.c: 159: {
   260                           ;LE2.c: 160: readKey(&rowCountIN);
   261  066F  307C               	movlw	main@rowCountIN& (0+255)
   262  0670  120A  118A  26FD  120A  118A  	fcall	_readKey
   263  0675  2E6B               	goto	l628
   264  0676                     __end_of_main:	
   265                           
   266                           	psect	text1
   267  06FD                     __ptext1:	
   268 ;; *************** function _readKey *****************
   269 ;; Defined at:
   270 ;;		line 70 in file "C:\Users\notjo\OneDrive\Desktop\USC\USC-Year3-Sem2\3201-EmbeddedSystems\Labs\LE_02\LE2.c"
   271 ;; Parameters:    Size  Location     Type
   272 ;;  rowCountIN      1    wreg     PTR int 
   273 ;;		 -> main@rowCountIN(2), 
   274 ;; Auto vars:     Size  Location     Type
   275 ;;  rowCountIN      1   11[COMMON] PTR int 
   276 ;;		 -> main@rowCountIN(2), 
   277 ;;  bits            2    9[COMMON] int 
   278 ;; Return value:  Size  Location     Type
   279 ;;		None               void
   280 ;; Registers used:
   281 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   282 ;; Tracked objects:
   283 ;;		On entry : 0/0
   284 ;;		On exit  : 0/0
   285 ;;		Unchanged: 0/0
   286 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   287 ;;      Params:         0       0       0       0       0
   288 ;;      Locals:         3       0       0       0       0
   289 ;;      Temps:          2       0       0       0       0
   290 ;;      Totals:         5       0       0       0       0
   291 ;;Total ram usage:        5 bytes
   292 ;; Hardware stack levels used:    1
   293 ;; Hardware stack levels required when called:    2
   294 ;; This function calls:
   295 ;;		_dataCtrl
   296 ;;		_instCtrl
   297 ;; This function is called by:
   298 ;;		_main
   299 ;; This function uses a non-reentrant model
   300 ;;
   301                           
   302                           
   303                           ;psect for function _readKey
   304  06FD                     _readKey:	
   305                           
   306                           ;incstack = 0
   307                           ; Regs used in _readKey: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   308                           ;readKey@rowCountIN stored from wreg
   309  06FD  00FB               	movwf	readKey@rowCountIN
   310                           
   311                           ;LE2.c: 74: int bits = PORTD;
   312  06FE  1283               	bcf	3,5	;RP0=0, select bank0
   313  06FF  1303               	bcf	3,6	;RP1=0, select bank0
   314  0700  0808               	movf	8,w	;volatile
   315  0701  00F7               	movwf	??_readKey
   316  0702  01F8               	clrf	??_readKey+1
   317  0703  0877               	movf	??_readKey,w
   318  0704  00F9               	movwf	readKey@bits
   319  0705  0878               	movf	??_readKey+1,w
   320  0706  00FA               	movwf	readKey@bits+1
   321                           
   322                           ;LE2.c: 75: switch(bits) {
   323  0707  2F71               	goto	l584
   324  0708                     l552:	
   325                           ;LE2.c: 76: case 0x1D:
   326                           
   327                           
   328                           ;LE2.c: 77: dataCtrl('0');
   329  0708  3030               	movlw	48
   330  0709  120A  118A  269E  120A  118A  	fcall	_dataCtrl
   331                           
   332                           ;LE2.c: 78: break;
   333  070E  2FA5               	goto	l586
   334  070F                     l554:	
   335                           ;LE2.c: 79: case 0x18:
   336                           
   337                           
   338                           ;LE2.c: 80: dataCtrl('1');
   339  070F  3031               	movlw	49
   340  0710  120A  118A  269E  120A  118A  	fcall	_dataCtrl
   341                           
   342                           ;LE2.c: 81: break;
   343  0715  2FA5               	goto	l586
   344  0716                     l556:	
   345                           ;LE2.c: 82: case 0x19:
   346                           
   347                           
   348                           ;LE2.c: 83: dataCtrl('2');
   349  0716  3032               	movlw	50
   350  0717  120A  118A  269E  120A  118A  	fcall	_dataCtrl
   351                           
   352                           ;LE2.c: 84: break;
   353  071C  2FA5               	goto	l586
   354  071D                     l558:	
   355                           ;LE2.c: 85: case 0x1A:
   356                           
   357                           
   358                           ;LE2.c: 86: dataCtrl('3');
   359  071D  3033               	movlw	51
   360  071E  120A  118A  269E  120A  118A  	fcall	_dataCtrl
   361                           
   362                           ;LE2.c: 87: break;
   363  0723  2FA5               	goto	l586
   364  0724                     l560:	
   365                           ;LE2.c: 88: case 0x14:
   366                           
   367                           
   368                           ;LE2.c: 89: dataCtrl('4');
   369  0724  3034               	movlw	52
   370  0725  120A  118A  269E  120A  118A  	fcall	_dataCtrl
   371                           
   372                           ;LE2.c: 90: break;
   373  072A  2FA5               	goto	l586
   374  072B                     l562:	
   375                           ;LE2.c: 91: case 0x15:
   376                           
   377                           
   378                           ;LE2.c: 92: dataCtrl('5');
   379  072B  3035               	movlw	53
   380  072C  120A  118A  269E  120A  118A  	fcall	_dataCtrl
   381                           
   382                           ;LE2.c: 93: break;
   383  0731  2FA5               	goto	l586
   384  0732                     l564:	
   385                           ;LE2.c: 94: case 0x16:
   386                           
   387                           
   388                           ;LE2.c: 95: dataCtrl('6');
   389  0732  3036               	movlw	54
   390  0733  120A  118A  269E  120A  118A  	fcall	_dataCtrl
   391                           
   392                           ;LE2.c: 96: break;
   393  0738  2FA5               	goto	l586
   394  0739                     l566:	
   395                           ;LE2.c: 97: case 0x10:
   396                           
   397                           
   398                           ;LE2.c: 98: dataCtrl('7');
   399  0739  3037               	movlw	55
   400  073A  120A  118A  269E  120A  118A  	fcall	_dataCtrl
   401                           
   402                           ;LE2.c: 99: break;
   403  073F  2FA5               	goto	l586
   404  0740                     l568:	
   405                           ;LE2.c: 100: case 0x11:
   406                           
   407                           
   408                           ;LE2.c: 101: dataCtrl('8');
   409  0740  3038               	movlw	56
   410  0741  120A  118A  269E  120A  118A  	fcall	_dataCtrl
   411                           
   412                           ;LE2.c: 102: break;
   413  0746  2FA5               	goto	l586
   414  0747                     l570:	
   415                           ;LE2.c: 103: case 0x12:
   416                           
   417                           
   418                           ;LE2.c: 104: dataCtrl('9');
   419  0747  3039               	movlw	57
   420  0748  120A  118A  269E  120A  118A  	fcall	_dataCtrl
   421                           
   422                           ;LE2.c: 105: break;
   423  074D  2FA5               	goto	l586
   424  074E                     l572:	
   425                           ;LE2.c: 106: case 0x1F:
   426                           
   427                           
   428                           ;LE2.c: 107: dataCtrl('+');
   429  074E  302B               	movlw	43
   430  074F  120A  118A  269E  120A  118A  	fcall	_dataCtrl
   431                           
   432                           ;LE2.c: 108: break;
   433  0754  2FA5               	goto	l586
   434  0755                     l574:	
   435                           ;LE2.c: 109: case 0x1B:
   436                           
   437                           
   438                           ;LE2.c: 110: dataCtrl('-');
   439  0755  302D               	movlw	45
   440  0756  120A  118A  269E  120A  118A  	fcall	_dataCtrl
   441                           
   442                           ;LE2.c: 111: break;
   443  075B  2FA5               	goto	l586
   444  075C                     l576:	
   445                           ;LE2.c: 112: case 0x17:
   446                           
   447                           
   448                           ;LE2.c: 113: dataCtrl('*');
   449  075C  302A               	movlw	42
   450  075D  120A  118A  269E  120A  118A  	fcall	_dataCtrl
   451                           
   452                           ;LE2.c: 114: break;
   453  0762  2FA5               	goto	l586
   454  0763                     l578:	
   455                           ;LE2.c: 115: case 0x13:
   456                           
   457                           
   458                           ;LE2.c: 116: dataCtrl('/');
   459  0763  302F               	movlw	47
   460  0764  120A  118A  269E  120A  118A  	fcall	_dataCtrl
   461                           
   462                           ;LE2.c: 117: break;
   463  0769  2FA5               	goto	l586
   464  076A                     l580:	
   465                           ;LE2.c: 118: case 0x1E:
   466                           
   467                           
   468                           ;LE2.c: 119: dataCtrl('=');
   469  076A  303D               	movlw	61
   470  076B  120A  118A  269E  120A  118A  	fcall	_dataCtrl
   471                           
   472                           ;LE2.c: 123: }
   473                           
   474                           ;LE2.c: 122: break;
   475                           
   476                           ;LE2.c: 121: default:
   477                           
   478                           ;LE2.c: 120: break;
   479  0770  2FA5               	goto	l586
   480  0771                     l584:	
   481                           
   482                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   483                           ; Switch size 1, requested type "space"
   484                           ; Number of cases is 1, Range of values is 0 to 0
   485                           ; switch strategies available:
   486                           ; Name         Instructions Cycles
   487                           ; simple_byte            4     3 (average)
   488                           ; direct_byte           11     8 (fixed)
   489                           ; jumptable            260     6 (fixed)
   490                           ;	Chosen strategy is simple_byte
   491  0771  087A               	movf	readKey@bits+1,w
   492  0772  3A00               	xorlw	0	; case 0
   493  0773  1903               	skipnz
   494  0774  2F76               	goto	l652
   495  0775  2FA5               	goto	l586
   496  0776                     l652:	
   497                           
   498                           ; Switch size 1, requested type "space"
   499                           ; Number of cases is 15, Range of values is 16 to 31
   500                           ; switch strategies available:
   501                           ; Name         Instructions Cycles
   502                           ; simple_byte           46    24 (average)
   503                           ; direct_byte           59    11 (fixed)
   504                           ; jumptable            263     9 (fixed)
   505                           ;	Chosen strategy is simple_byte
   506  0776  0879               	movf	readKey@bits,w
   507  0777  3A10               	xorlw	16	; case 16
   508  0778  1903               	skipnz
   509  0779  2F39               	goto	l566
   510  077A  3A01               	xorlw	1	; case 17
   511  077B  1903               	skipnz
   512  077C  2F40               	goto	l568
   513  077D  3A03               	xorlw	3	; case 18
   514  077E  1903               	skipnz
   515  077F  2F47               	goto	l570
   516  0780  3A01               	xorlw	1	; case 19
   517  0781  1903               	skipnz
   518  0782  2F63               	goto	l578
   519  0783  3A07               	xorlw	7	; case 20
   520  0784  1903               	skipnz
   521  0785  2F24               	goto	l560
   522  0786  3A01               	xorlw	1	; case 21
   523  0787  1903               	skipnz
   524  0788  2F2B               	goto	l562
   525  0789  3A03               	xorlw	3	; case 22
   526  078A  1903               	skipnz
   527  078B  2F32               	goto	l564
   528  078C  3A01               	xorlw	1	; case 23
   529  078D  1903               	skipnz
   530  078E  2F5C               	goto	l576
   531  078F  3A0F               	xorlw	15	; case 24
   532  0790  1903               	skipnz
   533  0791  2F0F               	goto	l554
   534  0792  3A01               	xorlw	1	; case 25
   535  0793  1903               	skipnz
   536  0794  2F16               	goto	l556
   537  0795  3A03               	xorlw	3	; case 26
   538  0796  1903               	skipnz
   539  0797  2F1D               	goto	l558
   540  0798  3A01               	xorlw	1	; case 27
   541  0799  1903               	skipnz
   542  079A  2F55               	goto	l574
   543  079B  3A06               	xorlw	6	; case 29
   544  079C  1903               	skipnz
   545  079D  2F08               	goto	l552
   546  079E  3A03               	xorlw	3	; case 30
   547  079F  1903               	skipnz
   548  07A0  2F6A               	goto	l580
   549  07A1  3A01               	xorlw	1	; case 31
   550  07A2  1903               	skipnz
   551  07A3  2F4E               	goto	l572
   552  07A4  2FA5               	goto	l586
   553  07A5                     l586:	
   554                           
   555                           ;LE2.c: 124: *rowCountIN += 1;
   556  07A5  087B               	movf	readKey@rowCountIN,w
   557  07A6  0084               	movwf	4
   558  07A7  3001               	movlw	1
   559  07A8  0780               	addwf	0,f
   560  07A9  0A84               	incf	4,f
   561  07AA  1803               	skipnc
   562  07AB  0A80               	incf	0,f
   563                           
   564                           ;LE2.c: 125: if(*rowCountIN == 20) {
   565  07AC  087B               	movf	readKey@rowCountIN,w
   566  07AD  0084               	movwf	4
   567  07AE  0800               	movf	0,w
   568  07AF  00F7               	movwf	??_readKey
   569  07B0  0A84               	incf	4,f
   570  07B1  0800               	movf	0,w
   571  07B2  00F8               	movwf	??_readKey+1
   572  07B3  3014               	movlw	20
   573  07B4  0677               	xorwf	??_readKey,w
   574  07B5  0478               	iorwf	??_readKey+1,w
   575  07B6  1D03               	skipz
   576  07B7  2FBA               	goto	l592
   577                           
   578                           ;LE2.c: 126: instCtrl(0xC0);
   579  07B8  30C0               	movlw	192
   580  07B9  2FD5               	goto	L1
   581  07BA                     l592:	
   582                           ;LE2.c: 127: } else if(*rowCountIN == 40) {
   583                           
   584  07BA  087B               	movf	readKey@rowCountIN,w
   585  07BB  0084               	movwf	4
   586  07BC  0800               	movf	0,w
   587  07BD  00F7               	movwf	??_readKey
   588  07BE  0A84               	incf	4,f
   589  07BF  0800               	movf	0,w
   590  07C0  00F8               	movwf	??_readKey+1
   591  07C1  3028               	movlw	40
   592  07C2  0677               	xorwf	??_readKey,w
   593  07C3  0478               	iorwf	??_readKey+1,w
   594  07C4  1D03               	skipz
   595  07C5  2FC8               	goto	l596
   596                           
   597                           ;LE2.c: 128: instCtrl(0x94);
   598  07C6  3094               	movlw	148
   599  07C7  2FD5               	goto	L1
   600  07C8                     l596:	
   601                           ;LE2.c: 129: } else if(*rowCountIN == 60) {
   602                           
   603  07C8  087B               	movf	readKey@rowCountIN,w
   604  07C9  0084               	movwf	4
   605  07CA  0800               	movf	0,w
   606  07CB  00F7               	movwf	??_readKey
   607  07CC  0A84               	incf	4,f
   608  07CD  0800               	movf	0,w
   609  07CE  00F8               	movwf	??_readKey+1
   610  07CF  303C               	movlw	60
   611  07D0  0677               	xorwf	??_readKey,w
   612  07D1  0478               	iorwf	??_readKey+1,w
   613  07D2  1D03               	skipz
   614  07D3  2FDD               	goto	l600
   615                           
   616                           ;LE2.c: 130: instCtrl(0xD4);
   617  07D4  30D4               	movlw	212
   618  07D5                     L1:	
   619  07D5  00F5               	movwf	instCtrl@instruction_in
   620  07D6  3000               	movlw	0
   621  07D7  00F6               	movwf	instCtrl@instruction_in+1
   622  07D8  120A  118A  2676  120A  118A  	fcall	_instCtrl
   623  07DD                     l600:	
   624                           
   625                           ;LE2.c: 131: }
   626                           ;LE2.c: 132: if ( *rowCountIN > 80) {
   627  07DD  087B               	movf	readKey@rowCountIN,w
   628  07DE  0084               	movwf	4
   629  07DF  0800               	movf	0,w
   630  07E0  00F7               	movwf	??_readKey
   631  07E1  0A84               	incf	4,f
   632  07E2  0800               	movf	0,w
   633  07E3  00F8               	movwf	??_readKey+1
   634  07E4  0878               	movf	??_readKey+1,w
   635  07E5  3A80               	xorlw	128
   636  07E6  00FF               	movwf	127
   637  07E7  3080               	movlw	128
   638  07E8  027F               	subwf	127,w
   639  07E9  1D03               	skipz
   640  07EA  2FED               	goto	u55
   641  07EB  3051               	movlw	81
   642  07EC  0277               	subwf	??_readKey,w
   643  07ED                     u55:	
   644  07ED  1C03               	skipc
   645  07EE  0008               	return
   646                           
   647                           ;LE2.c: 133: instCtrl(0x01);
   648  07EF  3001               	movlw	1
   649  07F0  00F5               	movwf	instCtrl@instruction_in
   650  07F1  3000               	movlw	0
   651  07F2  00F6               	movwf	instCtrl@instruction_in+1
   652  07F3  120A  118A  2676   	fcall	_instCtrl
   653                           
   654                           ;LE2.c: 134: *rowCountIN = 0;
   655  07F6  087B               	movf	readKey@rowCountIN,w
   656  07F7  0084               	movwf	4
   657  07F8  0180               	clrf	0
   658  07F9  0A84               	incf	4,f
   659  07FA  0180               	clrf	0
   660  07FB  0008               	return
   661  07FC                     __end_of_readKey:	
   662                           
   663                           	psect	text2
   664  069E                     __ptext2:	
   665 ;; *************** function _dataCtrl *****************
   666 ;; Defined at:
   667 ;;		line 46 in file "C:\Users\notjo\OneDrive\Desktop\USC\USC-Year3-Sem2\3201-EmbeddedSystems\Labs\LE_02\LE2.c"
   668 ;; Parameters:    Size  Location     Type
   669 ;;  data_inst_in    1    wreg     unsigned char 
   670 ;; Auto vars:     Size  Location     Type
   671 ;;  data_inst_in    1    5[COMMON] unsigned char 
   672 ;; Return value:  Size  Location     Type
   673 ;;		None               void
   674 ;; Registers used:
   675 ;;		wreg, status,2, status,0, pclath, cstack
   676 ;; Tracked objects:
   677 ;;		On entry : 0/0
   678 ;;		On exit  : 0/0
   679 ;;		Unchanged: 0/0
   680 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   681 ;;      Params:         0       0       0       0       0
   682 ;;      Locals:         1       0       0       0       0
   683 ;;      Temps:          0       0       0       0       0
   684 ;;      Totals:         1       0       0       0       0
   685 ;;Total ram usage:        1 bytes
   686 ;; Hardware stack levels used:    1
   687 ;; Hardware stack levels required when called:    1
   688 ;; This function calls:
   689 ;;		_delay
   690 ;; This function is called by:
   691 ;;		_readKey
   692 ;; This function uses a non-reentrant model
   693 ;;
   694                           
   695                           
   696                           ;psect for function _dataCtrl
   697  069E                     _dataCtrl:	
   698                           
   699                           ;incstack = 0
   700                           ; Regs used in _dataCtrl: [wreg+status,2+status,0+pclath+cstack]
   701                           ;dataCtrl@data_inst_in stored from wreg
   702  069E  00F5               	movwf	dataCtrl@data_inst_in
   703                           
   704                           ;LE2.c: 48: PORTB = data_inst_in;
   705  069F  0875               	movf	dataCtrl@data_inst_in,w
   706  06A0  1283               	bcf	3,5	;RP0=0, select bank0
   707  06A1  1303               	bcf	3,6	;RP1=0, select bank0
   708  06A2  0086               	movwf	6	;volatile
   709                           
   710                           ;LE2.c: 49: delay(2000);
   711  06A3  30D0               	movlw	208
   712  06A4  00F0               	movwf	delay@timeIn
   713  06A5  3007               	movlw	7
   714  06A6  00F1               	movwf	delay@timeIn+1
   715  06A7  120A  118A  263D  120A  118A  	fcall	_delay
   716                           
   717                           ;LE2.c: 51: PORTC = 0b00000110;
   718  06AC  3006               	movlw	6
   719  06AD  1283               	bcf	3,5	;RP0=0, select bank0
   720  06AE  1303               	bcf	3,6	;RP1=0, select bank0
   721  06AF  0087               	movwf	7	;volatile
   722                           
   723                           ;LE2.c: 52: delay(2000);
   724  06B0  30D0               	movlw	208
   725  06B1  00F0               	movwf	delay@timeIn
   726  06B2  3007               	movlw	7
   727  06B3  00F1               	movwf	delay@timeIn+1
   728  06B4  120A  118A  263D  120A  118A  	fcall	_delay
   729                           
   730                           ;LE2.c: 54: PORTC = 0b00000010;
   731  06B9  3002               	movlw	2
   732  06BA  1283               	bcf	3,5	;RP0=0, select bank0
   733  06BB  1303               	bcf	3,6	;RP1=0, select bank0
   734  06BC  0087               	movwf	7	;volatile
   735                           
   736                           ;LE2.c: 55: delay(2000);
   737  06BD  30D0               	movlw	208
   738  06BE  00F0               	movwf	delay@timeIn
   739  06BF  3007               	movlw	7
   740  06C0  00F1               	movwf	delay@timeIn+1
   741  06C1  120A  118A  263D   	fcall	_delay
   742                           
   743                           ;LE2.c: 57: PORTC = 0x00;
   744  06C4  1283               	bcf	3,5	;RP0=0, select bank0
   745  06C5  1303               	bcf	3,6	;RP1=0, select bank0
   746  06C6  0187               	clrf	7	;volatile
   747  06C7  0008               	return
   748  06C8                     __end_of_dataCtrl:	
   749                           
   750                           	psect	text3
   751  06C8                     __ptext3:	
   752 ;; *************** function _initLCD *****************
   753 ;; Defined at:
   754 ;;		line 60 in file "C:\Users\notjo\OneDrive\Desktop\USC\USC-Year3-Sem2\3201-EmbeddedSystems\Labs\LE_02\LE2.c"
   755 ;; Parameters:    Size  Location     Type
   756 ;;		None
   757 ;; Auto vars:     Size  Location     Type
   758 ;;		None
   759 ;; Return value:  Size  Location     Type
   760 ;;		None               void
   761 ;; Registers used:
   762 ;;		wreg, status,2, status,0, pclath, cstack
   763 ;; Tracked objects:
   764 ;;		On entry : 0/0
   765 ;;		On exit  : 0/0
   766 ;;		Unchanged: 0/0
   767 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   768 ;;      Params:         0       0       0       0       0
   769 ;;      Locals:         0       0       0       0       0
   770 ;;      Temps:          0       0       0       0       0
   771 ;;      Totals:         0       0       0       0       0
   772 ;;Total ram usage:        0 bytes
   773 ;; Hardware stack levels used:    1
   774 ;; Hardware stack levels required when called:    2
   775 ;; This function calls:
   776 ;;		_delay
   777 ;;		_instCtrl
   778 ;; This function is called by:
   779 ;;		_main
   780 ;; This function uses a non-reentrant model
   781 ;;
   782                           
   783                           
   784                           ;psect for function _initLCD
   785  06C8                     _initLCD:	
   786                           
   787                           ;LE2.c: 62: delay(2000);
   788                           
   789                           ;incstack = 0
   790                           ; Regs used in _initLCD: [wreg+status,2+status,0+pclath+cstack]
   791  06C8  30D0               	movlw	208
   792  06C9  00F0               	movwf	delay@timeIn
   793  06CA  3007               	movlw	7
   794  06CB  00F1               	movwf	delay@timeIn+1
   795  06CC  120A  118A  263D  120A  118A  	fcall	_delay
   796                           
   797                           ;LE2.c: 63: instCtrl(0x38);
   798  06D1  3038               	movlw	56
   799  06D2  00F5               	movwf	instCtrl@instruction_in
   800  06D3  3000               	movlw	0
   801  06D4  00F6               	movwf	instCtrl@instruction_in+1
   802  06D5  120A  118A  2676  120A  118A  	fcall	_instCtrl
   803                           
   804                           ;LE2.c: 64: instCtrl(0x08);
   805  06DA  3008               	movlw	8
   806  06DB  00F5               	movwf	instCtrl@instruction_in
   807  06DC  3000               	movlw	0
   808  06DD  00F6               	movwf	instCtrl@instruction_in+1
   809  06DE  120A  118A  2676  120A  118A  	fcall	_instCtrl
   810                           
   811                           ;LE2.c: 65: instCtrl(0x01);
   812  06E3  3001               	movlw	1
   813  06E4  00F5               	movwf	instCtrl@instruction_in
   814  06E5  3000               	movlw	0
   815  06E6  00F6               	movwf	instCtrl@instruction_in+1
   816  06E7  120A  118A  2676  120A  118A  	fcall	_instCtrl
   817                           
   818                           ;LE2.c: 66: instCtrl(0x06);
   819  06EC  3006               	movlw	6
   820  06ED  00F5               	movwf	instCtrl@instruction_in
   821  06EE  3000               	movlw	0
   822  06EF  00F6               	movwf	instCtrl@instruction_in+1
   823  06F0  120A  118A  2676  120A  118A  	fcall	_instCtrl
   824                           
   825                           ;LE2.c: 67: instCtrl(0x0C);
   826  06F5  300C               	movlw	12
   827  06F6  00F5               	movwf	instCtrl@instruction_in
   828  06F7  3000               	movlw	0
   829  06F8  00F6               	movwf	instCtrl@instruction_in+1
   830  06F9  120A  118A  2676   	fcall	_instCtrl
   831  06FC  0008               	return
   832  06FD                     __end_of_initLCD:	
   833                           
   834                           	psect	text4
   835  0676                     __ptext4:	
   836 ;; *************** function _instCtrl *****************
   837 ;; Defined at:
   838 ;;		line 32 in file "C:\Users\notjo\OneDrive\Desktop\USC\USC-Year3-Sem2\3201-EmbeddedSystems\Labs\LE_02\LE2.c"
   839 ;; Parameters:    Size  Location     Type
   840 ;;  instruction_    2    5[COMMON] int 
   841 ;; Auto vars:     Size  Location     Type
   842 ;;		None
   843 ;; Return value:  Size  Location     Type
   844 ;;		None               void
   845 ;; Registers used:
   846 ;;		wreg, status,2, status,0, pclath, cstack
   847 ;; Tracked objects:
   848 ;;		On entry : 0/0
   849 ;;		On exit  : 0/0
   850 ;;		Unchanged: 0/0
   851 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   852 ;;      Params:         2       0       0       0       0
   853 ;;      Locals:         0       0       0       0       0
   854 ;;      Temps:          0       0       0       0       0
   855 ;;      Totals:         2       0       0       0       0
   856 ;;Total ram usage:        2 bytes
   857 ;; Hardware stack levels used:    1
   858 ;; Hardware stack levels required when called:    1
   859 ;; This function calls:
   860 ;;		_delay
   861 ;; This function is called by:
   862 ;;		_initLCD
   863 ;;		_readKey
   864 ;; This function uses a non-reentrant model
   865 ;;
   866                           
   867                           
   868                           ;psect for function _instCtrl
   869  0676                     _instCtrl:	
   870                           
   871                           ;LE2.c: 34: PORTB = instruction_in;
   872                           
   873                           ;incstack = 0
   874                           ; Regs used in _instCtrl: [wreg+status,2+status,0+pclath+cstack]
   875  0676  0875               	movf	instCtrl@instruction_in,w
   876  0677  1283               	bcf	3,5	;RP0=0, select bank0
   877  0678  1303               	bcf	3,6	;RP1=0, select bank0
   878  0679  0086               	movwf	6	;volatile
   879                           
   880                           ;LE2.c: 35: delay(2000);
   881  067A  30D0               	movlw	208
   882  067B  00F0               	movwf	delay@timeIn
   883  067C  3007               	movlw	7
   884  067D  00F1               	movwf	delay@timeIn+1
   885  067E  120A  118A  263D  120A  118A  	fcall	_delay
   886                           
   887                           ;LE2.c: 37: PORTC = 0b00000100;
   888  0683  3004               	movlw	4
   889  0684  1283               	bcf	3,5	;RP0=0, select bank0
   890  0685  1303               	bcf	3,6	;RP1=0, select bank0
   891  0686  0087               	movwf	7	;volatile
   892                           
   893                           ;LE2.c: 38: delay(2000);
   894  0687  30D0               	movlw	208
   895  0688  00F0               	movwf	delay@timeIn
   896  0689  3007               	movlw	7
   897  068A  00F1               	movwf	delay@timeIn+1
   898  068B  120A  118A  263D  120A  118A  	fcall	_delay
   899                           
   900                           ;LE2.c: 40: PORTC = 0x00;
   901  0690  1283               	bcf	3,5	;RP0=0, select bank0
   902  0691  1303               	bcf	3,6	;RP1=0, select bank0
   903  0692  0187               	clrf	7	;volatile
   904                           
   905                           ;LE2.c: 41: delay(2000);
   906  0693  30D0               	movlw	208
   907  0694  00F0               	movwf	delay@timeIn
   908  0695  3007               	movlw	7
   909  0696  00F1               	movwf	delay@timeIn+1
   910  0697  120A  118A  263D   	fcall	_delay
   911                           
   912                           ;LE2.c: 43: PORTC = 0x00;
   913  069A  1283               	bcf	3,5	;RP0=0, select bank0
   914  069B  1303               	bcf	3,6	;RP1=0, select bank0
   915  069C  0187               	clrf	7	;volatile
   916  069D  0008               	return
   917  069E                     __end_of_instCtrl:	
   918                           
   919                           	psect	text5
   920  063D                     __ptext5:	
   921 ;; *************** function _delay *****************
   922 ;; Defined at:
   923 ;;		line 28 in file "C:\Users\notjo\OneDrive\Desktop\USC\USC-Year3-Sem2\3201-EmbeddedSystems\Labs\LE_02\LE2.c"
   924 ;; Parameters:    Size  Location     Type
   925 ;;  timeIn          2    0[COMMON] int 
   926 ;; Auto vars:     Size  Location     Type
   927 ;;  j               2    3[COMMON] int 
   928 ;; Return value:  Size  Location     Type
   929 ;;		None               void
   930 ;; Registers used:
   931 ;;		wreg, status,2
   932 ;; Tracked objects:
   933 ;;		On entry : 0/0
   934 ;;		On exit  : 0/0
   935 ;;		Unchanged: 0/0
   936 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   937 ;;      Params:         2       0       0       0       0
   938 ;;      Locals:         2       0       0       0       0
   939 ;;      Temps:          1       0       0       0       0
   940 ;;      Totals:         5       0       0       0       0
   941 ;;Total ram usage:        5 bytes
   942 ;; Hardware stack levels used:    1
   943 ;; This function calls:
   944 ;;		Nothing
   945 ;; This function is called by:
   946 ;;		_instCtrl
   947 ;;		_dataCtrl
   948 ;;		_initLCD
   949 ;; This function uses a non-reentrant model
   950 ;;
   951                           
   952                           
   953                           ;psect for function _delay
   954  063D                     _delay:	
   955                           
   956                           ;LE2.c: 29: for(int j = 0; j < timeIn; j++);
   957                           
   958                           ;incstack = 0
   959                           ; Regs used in _delay: [wreg+status,2]
   960  063D  01F3               	clrf	delay@j
   961  063E  01F4               	clrf	delay@j+1
   962  063F                     l19:	
   963  063F  0874               	movf	delay@j+1,w
   964  0640  3A80               	xorlw	128
   965  0641  00F2               	movwf	??_delay
   966  0642  0871               	movf	delay@timeIn+1,w
   967  0643  3A80               	xorlw	128
   968  0644  0272               	subwf	??_delay,w
   969  0645  1D03               	skipz
   970  0646  2E49               	goto	u15
   971  0647  0870               	movf	delay@timeIn,w
   972  0648  0273               	subwf	delay@j,w
   973  0649                     u15:	
   974  0649  1803               	btfsc	3,0
   975  064A  0008               	return
   976  064B  3001               	movlw	1
   977  064C  07F3               	addwf	delay@j,f
   978  064D  1803               	skipnc
   979  064E  0AF4               	incf	delay@j+1,f
   980  064F  3000               	movlw	0
   981  0650  07F4               	addwf	delay@j+1,f
   982  0651  2E3F               	goto	l19
   983  0652                     __end_of_delay:	
   984  007E                     btemp	set	126	;btemp
   985  007E                     wtemp	set	126
   986  007E                     wtemp0	set	126
   987  0080                     wtemp1	set	128
   988  0082                     wtemp2	set	130
   989  0084                     wtemp3	set	132
   990  0086                     wtemp4	set	134
   991  0088                     wtemp5	set	136
   992  007F                     wtemp6	set	127
   993  007E                     ttemp	set	126
   994  007E                     ttemp0	set	126
   995  0081                     ttemp1	set	129
   996  0084                     ttemp2	set	132
   997  0087                     ttemp3	set	135
   998  007F                     ttemp4	set	127
   999  007E                     ltemp	set	126
  1000  007E                     ltemp0	set	126
  1001  0082                     ltemp1	set	130
  1002  0086                     ltemp2	set	134
  1003  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80      0       0
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    readKey@rowCountIN	PTR int  size(1) Largest target is 2
		 -> main@rowCountIN(COMMON[2]), 


Critical Paths under _main in COMMON

    _main->_readKey
    _readKey->_instCtrl
    _dataCtrl->_delay
    _initLCD->_instCtrl
    _instCtrl->_delay

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0    2287
                                             12 COMMON     2     2      0
                            _initLCD
                            _readKey
 ---------------------------------------------------------------------------------
 (1) _readKey                                              5     5      0    1208
                                              7 COMMON     5     5      0
                           _dataCtrl
                           _instCtrl
 ---------------------------------------------------------------------------------
 (2) _dataCtrl                                             1     1      0     346
                                              5 COMMON     1     1      0
                              _delay
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              0     0      0    1064
                              _delay
                           _instCtrl
 ---------------------------------------------------------------------------------
 (2) _instCtrl                                             2     0      2     733
                                              5 COMMON     2     0      2
                              _delay
 ---------------------------------------------------------------------------------
 (3) _delay                                                5     3      2     331
                                              0 COMMON     5     3      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _initLCD
     _delay
     _instCtrl
       _delay
   _readKey
     _dataCtrl
       _delay
     _instCtrl
       _delay

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      E       E       1      100.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0       0      12        0.0%


Microchip Technology PIC Macro Assembler V1.33 build 59893 
Symbol Table                                                                                   Wed Feb 07 20:54:50 2024

            __CFG_CP$OFF 0000                       l19 063F                       u15 0649  
                     u55 07ED                      l600 07DD                      l560 0724  
                    l552 0708                      l570 0747                      l562 072B  
                    l554 070F                      l652 0776                      l580 076A  
                    l572 074E                      l564 0732                      l556 0716  
                    l628 066B                      l574 0755                      l566 0739  
                    l558 071D                      l592 07BA                      l576 075C  
                    l568 0740                      l584 0771                      l578 0763  
                    l586 07A5                      l596 07C8                      _RD4 0044  
           __CFG_CPD$OFF 0000                      fsr0 0004                      indf 0000  
           __CFG_FOSC$XT 0000     dataCtrl@data_inst_in 0075             __CFG_LVP$OFF 0000  
           __CFG_WRT$OFF 0000                     _main 0652                     btemp 007E  
          __CFG_BOREN$ON 0000                     ltemp 007E                     start 0000  
                   ttemp 007E                     wtemp 007E                    ?_main 0070  
          __CFG_WDTE$OFF 0000                    _PORTB 0006                    _PORTC 0007  
                  _PORTD 0008                    _TRISB 0086                    _TRISC 0087  
                  _TRISD 0088            __CFG_PWRTE$ON 0000          __end_of_initLCD 06FD  
                  _delay 063D        readKey@rowCountIN 007B          __end_of_readKey 07FC  
                  ltemp0 007E                    ltemp1 0082                    ltemp2 0086  
                  ltemp3 0080                    ttemp0 007E                    ttemp1 0081  
                  ttemp2 0084                    ttemp3 0087                    ttemp4 007F  
                  status 0003                    wtemp0 007E                    wtemp1 0080  
                  wtemp2 0082                    wtemp3 0084                    wtemp4 0086  
                  wtemp5 0088                    wtemp6 007F          __initialization 07FC  
           __end_of_main 0676                   ??_main 007C                   ?_delay 0070  
            readKey@bits 0079         __end_of_dataCtrl 06C8                   delay@j 0073  
       __end_of_instCtrl 069E                ??_initLCD 0077                ??_readKey 0077  
__end_of__initialization 07FC           __pcstackCOMMON 0070            __end_of_delay 0652  
                ??_delay 0072               __pmaintext 0652                ?_dataCtrl 0070  
              ?_instCtrl 0075                  __ptext0 0000                  __ptext1 06FD  
                __ptext2 069E                  __ptext3 06C8                  __ptext4 0676  
                __ptext5 063D                  _initLCD 06C8                  _readKey 06FD  
             ??_dataCtrl 0075     end_of_initialization 07FC           main@rowCountIN 007C  
             ??_instCtrl 0077      start_initialization 07FC                ___latbits 0002  
      __size_of_dataCtrl 002A        __size_of_instCtrl 0028                 ?_initLCD 0070  
               ?_readKey 0070           __size_of_delay 0015                 _dataCtrl 069E  
       __size_of_initLCD 0035         __size_of_readKey 00FF            __size_of_main 0024  
               _instCtrl 0676              delay@timeIn 0070   instCtrl@instruction_in 0075  
             _OPTION_REG 0081  
