

Microchip Technology PIC LITE Macro Assembler V1.33 build 59893 
                                                                                               Wed Feb 07 22:01:01 2024

Microchip Technology Omniscient Code Generator (Lite mode) build 59893
     1                           	processor	16F877A
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	text0,local,class=CODE,merge=1,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	maintext,global,class=CODE,split=1,delta=2
     9                           	psect	text1,local,class=CODE,merge=1,delta=2
    10                           	psect	text2,local,class=CODE,merge=1,delta=2
    11                           	psect	text3,local,class=CODE,merge=1,delta=2
    12                           	psect	text4,local,class=CODE,merge=1,delta=2
    13                           	psect	text5,local,class=CODE,merge=1,delta=2
    14                           	psect	text6,local,class=CODE,merge=1,delta=2
    15                           	dabs	1,0x7E,2
    16  0000                     	;# 
    17  0001                     	;# 
    18  0002                     	;# 
    19  0003                     	;# 
    20  0004                     	;# 
    21  0005                     	;# 
    22  0006                     	;# 
    23  0007                     	;# 
    24  0008                     	;# 
    25  0009                     	;# 
    26  000A                     	;# 
    27  000B                     	;# 
    28  000C                     	;# 
    29  000D                     	;# 
    30  000E                     	;# 
    31  000E                     	;# 
    32  000F                     	;# 
    33  0010                     	;# 
    34  0011                     	;# 
    35  0012                     	;# 
    36  0013                     	;# 
    37  0014                     	;# 
    38  0015                     	;# 
    39  0015                     	;# 
    40  0016                     	;# 
    41  0017                     	;# 
    42  0018                     	;# 
    43  0019                     	;# 
    44  001A                     	;# 
    45  001B                     	;# 
    46  001B                     	;# 
    47  001C                     	;# 
    48  001D                     	;# 
    49  001E                     	;# 
    50  001F                     	;# 
    51  0081                     	;# 
    52  0085                     	;# 
    53  0086                     	;# 
    54  0087                     	;# 
    55  0088                     	;# 
    56  0089                     	;# 
    57  008C                     	;# 
    58  008D                     	;# 
    59  008E                     	;# 
    60  0091                     	;# 
    61  0092                     	;# 
    62  0093                     	;# 
    63  0094                     	;# 
    64  0098                     	;# 
    65  0099                     	;# 
    66  009C                     	;# 
    67  009D                     	;# 
    68  009E                     	;# 
    69  009F                     	;# 
    70  010C                     	;# 
    71  010D                     	;# 
    72  010E                     	;# 
    73  010F                     	;# 
    74  018C                     	;# 
    75  018D                     	;# 
    76  0006                     _PORTB	set	6
    77  0007                     _PORTC	set	7
    78  0008                     _PORTD	set	8
    79  0044                     _RD4	set	68
    80  0086                     _TRISB	set	134
    81  0087                     _TRISC	set	135
    82  0088                     _TRISD	set	136
    83                           
    84                           	psect	text0
    85  0000                     __ptext0:	
    86                           ; #config settings
    87                           
    88                           
    89                           ;psect for function ___awmod
    90  0000                     
    91                           	psect	cinit
    92  07FC                     start_initialization:	
    93  07FC                     __initialization:	
    94  07FC                     end_of_initialization:	
    95                           ;End of C runtime variable initialization code
    96                           
    97  07FC                     __end_of__initialization:	
    98  07FC  0183               	clrf	3
    99  07FD  120A  118A  2E9B   	ljmp	_main	;jump to C main() function
   100                           
   101                           	psect	cstackCOMMON
   102  0070                     __pcstackCOMMON:	
   103  0070                     ?_delay:	
   104  0070                     ?_initLCD:	
   105                           ; 0 bytes @ 0x0
   106                           
   107  0070                     ?_main:	
   108                           ; 0 bytes @ 0x0
   109                           
   110  0070                     ?___awmod:	
   111                           ; 0 bytes @ 0x0
   112                           
   113  0070                     delay@timeIn:	
   114                           ; 2 bytes @ 0x0
   115                           
   116  0070                     ___awmod@divisor:	
   117                           ; 2 bytes @ 0x0
   118                           
   119                           
   120                           ; 2 bytes @ 0x0
   121  0070                     	ds	2
   122  0072                     ??_delay:	
   123  0072                     ___awmod@dividend:	
   124                           ; 0 bytes @ 0x2
   125                           
   126                           
   127                           ; 2 bytes @ 0x2
   128  0072                     	ds	1
   129  0073                     delay@j:	
   130                           
   131                           ; 2 bytes @ 0x3
   132  0073                     	ds	1
   133  0074                     ??___awmod:	
   134                           
   135                           ; 0 bytes @ 0x4
   136  0074                     	ds	1
   137  0075                     ?_instCtrl:	
   138  0075                     ?_dataCtrl:	
   139                           ; 0 bytes @ 0x5
   140                           
   141  0075                     ___awmod@counter:	
   142                           ; 0 bytes @ 0x5
   143                           
   144  0075                     instCtrl@dataIn:	
   145                           ; 1 bytes @ 0x5
   146                           
   147  0075                     dataCtrl@dataIn:	
   148                           ; 2 bytes @ 0x5
   149                           
   150                           
   151                           ; 2 bytes @ 0x5
   152  0075                     	ds	1
   153  0076                     ___awmod@sign:	
   154                           
   155                           ; 1 bytes @ 0x6
   156  0076                     	ds	1
   157  0077                     ??_instCtrl:	
   158  0077                     ??_dataCtrl:	
   159                           ; 0 bytes @ 0x7
   160                           
   161  0077                     ??_initLCD:	
   162                           ; 0 bytes @ 0x7
   163                           
   164  0077                     ?_readKey:	
   165                           ; 0 bytes @ 0x7
   166                           
   167                           
   168                           ; 2 bytes @ 0x7
   169  0077                     	ds	2
   170  0079                     ??_readKey:	
   171                           
   172                           ; 0 bytes @ 0x9
   173  0079                     	ds	2
   174  007B                     ??_main:	
   175                           
   176                           	psect	cstackBANK0
   177  0020                     __pcstackBANK0:	
   178                           ; 0 bytes @ 0xB
   179                           
   180  0020                     readKey@rowCount:	
   181                           
   182                           ; 1 bytes @ 0x0
   183  0020                     	ds	1
   184  0021                     readKey@bits:	
   185                           
   186                           ; 2 bytes @ 0x1
   187  0021                     	ds	2
   188  0023                     readKey@isValidKey:	
   189                           
   190                           ; 2 bytes @ 0x3
   191  0023                     	ds	2
   192  0025                     main@isValidKey:	
   193                           
   194                           ; 2 bytes @ 0x5
   195  0025                     	ds	2
   196  0027                     main@rowCount:	
   197                           
   198                           ; 2 bytes @ 0x7
   199  0027                     	ds	2
   200                           
   201                           	psect	maintext
   202  069B                     __pmaintext:	
   203 ;;
   204 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   205 ;;
   206 ;; *************** function _main *****************
   207 ;; Defined at:
   208 ;;		line 143 in file "C:\Users\notjo\OneDrive\Desktop\USC\USC-Year3-Sem2\3201-EmbeddedSystems\Labs\LE_02\LE2.c"
   209 ;; Parameters:    Size  Location     Type
   210 ;;		None
   211 ;; Auto vars:     Size  Location     Type
   212 ;;  isValidKey      2    5[BANK0 ] int 
   213 ;;  rowCount        2    7[BANK0 ] int 
   214 ;; Return value:  Size  Location     Type
   215 ;;		None               void
   216 ;; Registers used:
   217 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   218 ;; Tracked objects:
   219 ;;		On entry : 17F/0
   220 ;;		On exit  : 0/0
   221 ;;		Unchanged: 0/0
   222 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   223 ;;      Params:         0       0       0       0       0
   224 ;;      Locals:         0       4       0       0       0
   225 ;;      Temps:          0       0       0       0       0
   226 ;;      Totals:         0       4       0       0       0
   227 ;;Total ram usage:        4 bytes
   228 ;; Hardware stack levels required when called:    3
   229 ;; This function calls:
   230 ;;		___awmod
   231 ;;		_initLCD
   232 ;;		_instCtrl
   233 ;;		_readKey
   234 ;; This function is called by:
   235 ;;		Startup code after reset
   236 ;; This function uses a non-reentrant model
   237 ;;
   238                           
   239                           
   240                           ;psect for function _main
   241  069B                     _main:	
   242                           
   243                           ;LE2.c: 145: int rowCount = 0;
   244                           
   245                           ;incstack = 0
   246                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   247  069B  1283               	bcf	3,5	;RP0=0, select bank0
   248  069C  1303               	bcf	3,6	;RP1=0, select bank0
   249  069D  01A7               	clrf	main@rowCount
   250  069E  01A8               	clrf	main@rowCount+1
   251                           
   252                           ;LE2.c: 146: TRISB = 0x00;
   253  069F  1683               	bsf	3,5	;RP0=1, select bank1
   254  06A0  1303               	bcf	3,6	;RP1=0, select bank1
   255  06A1  0186               	clrf	6	;volatile
   256                           
   257                           ;LE2.c: 147: TRISC = 0x00;
   258  06A2  0187               	clrf	7	;volatile
   259                           
   260                           ;LE2.c: 148: TRISD = 0xFF;
   261  06A3  30FF               	movlw	255
   262  06A4  0088               	movwf	8	;volatile
   263                           
   264                           ;LE2.c: 150: initLCD();
   265  06A5  120A  118A  2619  120A  118A  	fcall	_initLCD
   266  06AA                     l806:	
   267                           ;LE2.c: 151: while (1)
   268                           
   269                           
   270                           ;LE2.c: 152: {
   271                           ;LE2.c: 153: if (RD4 == 1)
   272  06AA  1283               	bcf	3,5	;RP0=0, select bank0
   273  06AB  1303               	bcf	3,6	;RP1=0, select bank0
   274  06AC  1E08               	btfss	8,4	;volatile
   275  06AD  2EAA               	goto	l806
   276                           
   277                           ;LE2.c: 154: {
   278                           ;LE2.c: 155: int isValidKey = readKey(&rowCount);
   279  06AE  3027               	movlw	main@rowCount& (0+255)
   280  06AF  120A  118A  2716  120A  118A  	fcall	_readKey
   281  06B4  0878               	movf	?_readKey+1,w
   282  06B5  1283               	bcf	3,5	;RP0=0, select bank0
   283  06B6  1303               	bcf	3,6	;RP1=0, select bank0
   284  06B7  01A6               	clrf	main@isValidKey+1
   285  06B8  07A6               	addwf	main@isValidKey+1,f
   286  06B9  0877               	movf	?_readKey,w
   287  06BA  01A5               	clrf	main@isValidKey
   288  06BB  07A5               	addwf	main@isValidKey,f
   289                           
   290                           ;LE2.c: 156: if (isValidKey)
   291  06BC  0826               	movf	main@isValidKey+1,w
   292  06BD  0425               	iorwf	main@isValidKey,w
   293  06BE  1903               	skipnz
   294  06BF  2EAA               	goto	l806
   295                           
   296                           ;LE2.c: 157: {
   297                           ;LE2.c: 158: rowCount += 1;
   298  06C0  3001               	movlw	1
   299  06C1  07A7               	addwf	main@rowCount,f
   300  06C2  1803               	skipnc
   301  06C3  0AA8               	incf	main@rowCount+1,f
   302  06C4  3000               	movlw	0
   303  06C5  07A8               	addwf	main@rowCount+1,f
   304                           
   305                           ;LE2.c: 159: if (rowCount % 20 == 0)
   306  06C6  3014               	movlw	20
   307  06C7  00F0               	movwf	___awmod@divisor
   308  06C8  3000               	movlw	0
   309  06C9  00F1               	movwf	___awmod@divisor+1
   310  06CA  0828               	movf	main@rowCount+1,w
   311  06CB  01F3               	clrf	___awmod@dividend+1
   312  06CC  07F3               	addwf	___awmod@dividend+1,f
   313  06CD  0827               	movf	main@rowCount,w
   314  06CE  01F2               	clrf	___awmod@dividend
   315  06CF  07F2               	addwf	___awmod@dividend,f
   316  06D0  120A  118A  264E  120A  118A  	fcall	___awmod
   317  06D5  0871               	movf	?___awmod+1,w
   318  06D6  0470               	iorwf	?___awmod,w
   319  06D7  1D03               	skipz
   320  06D8  2EFB               	goto	l828
   321                           
   322                           ;LE2.c: 160: {
   323                           ;LE2.c: 161: if (rowCount == 20)
   324  06D9  3014               	movlw	20
   325  06DA  1283               	bcf	3,5	;RP0=0, select bank0
   326  06DB  1303               	bcf	3,6	;RP1=0, select bank0
   327  06DC  0627               	xorwf	main@rowCount,w
   328  06DD  0428               	iorwf	main@rowCount+1,w
   329  06DE  1D03               	skipz
   330  06DF  2EE2               	goto	l820
   331                           
   332                           ;LE2.c: 162: instCtrl(0xC0);
   333  06E0  30C0               	movlw	192
   334  06E1  2EF3               	goto	L1
   335  06E2                     l820:	
   336                           
   337                           ;LE2.c: 163: else if (rowCount == 40)
   338  06E2  3028               	movlw	40
   339  06E3  1283               	bcf	3,5	;RP0=0, select bank0
   340  06E4  1303               	bcf	3,6	;RP1=0, select bank0
   341  06E5  0627               	xorwf	main@rowCount,w
   342  06E6  0428               	iorwf	main@rowCount+1,w
   343  06E7  1D03               	skipz
   344  06E8  2EEB               	goto	l824
   345                           
   346                           ;LE2.c: 164: instCtrl(0x94);
   347  06E9  3094               	movlw	148
   348  06EA  2EF3               	goto	L1
   349  06EB                     l824:	
   350                           
   351                           ;LE2.c: 165: else if (rowCount == 60)
   352  06EB  303C               	movlw	60
   353  06EC  1283               	bcf	3,5	;RP0=0, select bank0
   354  06ED  1303               	bcf	3,6	;RP1=0, select bank0
   355  06EE  0627               	xorwf	main@rowCount,w
   356  06EF  0428               	iorwf	main@rowCount+1,w
   357  06F0  1D03               	skipz
   358  06F1  2EFB               	goto	l828
   359                           
   360                           ;LE2.c: 166: instCtrl(0xD4);
   361  06F2  30D4               	movlw	212
   362  06F3                     L1:	
   363  06F3  00F5               	movwf	instCtrl@dataIn
   364  06F4  3000               	movlw	0
   365  06F5  00F6               	movwf	instCtrl@dataIn+1
   366  06F6  120A  118A  25C8  120A  118A  	fcall	_instCtrl
   367  06FB                     l828:	
   368                           
   369                           ;LE2.c: 167: }
   370                           ;LE2.c: 168: if (rowCount > 80)
   371  06FB  1283               	bcf	3,5	;RP0=0, select bank0
   372  06FC  1303               	bcf	3,6	;RP1=0, select bank0
   373  06FD  0828               	movf	main@rowCount+1,w
   374  06FE  3A80               	xorlw	128
   375  06FF  00FF               	movwf	127
   376  0700  3080               	movlw	128
   377  0701  027F               	subwf	127,w
   378  0702  1D03               	skipz
   379  0703  2F06               	goto	u345
   380  0704  3051               	movlw	81
   381  0705  0227               	subwf	main@rowCount,w
   382  0706                     u345:	
   383  0706  1C03               	skipc
   384  0707  2EAA               	goto	l806
   385                           
   386                           ;LE2.c: 169: {
   387                           ;LE2.c: 170: instCtrl(0x01);
   388  0708  3001               	movlw	1
   389  0709  00F5               	movwf	instCtrl@dataIn
   390  070A  3000               	movlw	0
   391  070B  00F6               	movwf	instCtrl@dataIn+1
   392  070C  120A  118A  25C8  120A  118A  	fcall	_instCtrl
   393                           
   394                           ;LE2.c: 171: rowCount = 0;
   395  0711  1283               	bcf	3,5	;RP0=0, select bank0
   396  0712  1303               	bcf	3,6	;RP1=0, select bank0
   397  0713  01A7               	clrf	main@rowCount
   398  0714  01A8               	clrf	main@rowCount+1
   399  0715  2EAA               	goto	l806
   400  0716                     __end_of_main:	
   401                           
   402                           	psect	text1
   403  0716                     __ptext1:	
   404 ;; *************** function _readKey *****************
   405 ;; Defined at:
   406 ;;		line 85 in file "C:\Users\notjo\OneDrive\Desktop\USC\USC-Year3-Sem2\3201-EmbeddedSystems\Labs\LE_02\LE2.c"
   407 ;; Parameters:    Size  Location     Type
   408 ;;  rowCount        1    wreg     PTR int 
   409 ;;		 -> main@rowCount(2), 
   410 ;; Auto vars:     Size  Location     Type
   411 ;;  rowCount        1    0[BANK0 ] PTR int 
   412 ;;		 -> main@rowCount(2), 
   413 ;;  isValidKey      2    3[BANK0 ] int 
   414 ;;  bits            2    1[BANK0 ] int 
   415 ;; Return value:  Size  Location     Type
   416 ;;                  2    7[COMMON] int 
   417 ;; Registers used:
   418 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   419 ;; Tracked objects:
   420 ;;		On entry : 0/0
   421 ;;		On exit  : 0/0
   422 ;;		Unchanged: 0/0
   423 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   424 ;;      Params:         2       0       0       0       0
   425 ;;      Locals:         0       5       0       0       0
   426 ;;      Temps:          2       0       0       0       0
   427 ;;      Totals:         4       5       0       0       0
   428 ;;Total ram usage:        9 bytes
   429 ;; Hardware stack levels used:    1
   430 ;; Hardware stack levels required when called:    2
   431 ;; This function calls:
   432 ;;		_dataCtrl
   433 ;; This function is called by:
   434 ;;		_main
   435 ;; This function uses a non-reentrant model
   436 ;;
   437                           
   438                           
   439                           ;psect for function _readKey
   440  0716                     _readKey:	
   441                           
   442                           ;LE2.c: 87: int isValidKey = 1;
   443                           
   444                           ;incstack = 0
   445                           ; Regs used in _readKey: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   446  0716  3001               	movlw	1
   447  0717  1283               	bcf	3,5	;RP0=0, select bank0
   448  0718  1303               	bcf	3,6	;RP1=0, select bank0
   449  0719  00A3               	movwf	readKey@isValidKey
   450  071A  3000               	movlw	0
   451  071B  00A4               	movwf	readKey@isValidKey+1
   452                           
   453                           ;LE2.c: 88: int bits = PORTD;
   454  071C  0808               	movf	8,w	;volatile
   455  071D  00F9               	movwf	??_readKey
   456  071E  01FA               	clrf	??_readKey+1
   457  071F  0879               	movf	??_readKey,w
   458  0720  00A1               	movwf	readKey@bits
   459  0721  087A               	movf	??_readKey+1,w
   460  0722  00A2               	movwf	readKey@bits+1
   461                           
   462                           ;LE2.c: 89: switch (bits)
   463  0723  2FBF               	goto	l752
   464  0724                     l718:	
   465                           ;LE2.c: 90: {
   466                           ;LE2.c: 91: case KEY_0:
   467                           
   468                           
   469                           ;LE2.c: 92: dataCtrl('0');
   470  0724  3030               	movlw	48
   471  0725  00F5               	movwf	dataCtrl@dataIn
   472  0726  3000               	movlw	0
   473  0727  00F6               	movwf	dataCtrl@dataIn+1
   474  0728  120A  118A  25F0  120A  118A  	fcall	_dataCtrl
   475                           
   476                           ;LE2.c: 93: break;
   477  072D  2FF3               	goto	l754
   478  072E                     l720:	
   479                           ;LE2.c: 94: case KEY_1:
   480                           
   481                           
   482                           ;LE2.c: 95: dataCtrl('1');
   483  072E  3031               	movlw	49
   484  072F  00F5               	movwf	dataCtrl@dataIn
   485  0730  3000               	movlw	0
   486  0731  00F6               	movwf	dataCtrl@dataIn+1
   487  0732  120A  118A  25F0  120A  118A  	fcall	_dataCtrl
   488                           
   489                           ;LE2.c: 96: break;
   490  0737  2FF3               	goto	l754
   491  0738                     l722:	
   492                           ;LE2.c: 97: case KEY_2:
   493                           
   494                           
   495                           ;LE2.c: 98: dataCtrl('2');
   496  0738  3032               	movlw	50
   497  0739  00F5               	movwf	dataCtrl@dataIn
   498  073A  3000               	movlw	0
   499  073B  00F6               	movwf	dataCtrl@dataIn+1
   500  073C  120A  118A  25F0  120A  118A  	fcall	_dataCtrl
   501                           
   502                           ;LE2.c: 99: break;
   503  0741  2FF3               	goto	l754
   504  0742                     l724:	
   505                           ;LE2.c: 100: case KEY_3:
   506                           
   507                           
   508                           ;LE2.c: 101: dataCtrl('3');
   509  0742  3033               	movlw	51
   510  0743  00F5               	movwf	dataCtrl@dataIn
   511  0744  3000               	movlw	0
   512  0745  00F6               	movwf	dataCtrl@dataIn+1
   513  0746  120A  118A  25F0  120A  118A  	fcall	_dataCtrl
   514                           
   515                           ;LE2.c: 102: break;
   516  074B  2FF3               	goto	l754
   517  074C                     l726:	
   518                           ;LE2.c: 103: case KEY_4:
   519                           
   520                           
   521                           ;LE2.c: 104: dataCtrl('4');
   522  074C  3034               	movlw	52
   523  074D  00F5               	movwf	dataCtrl@dataIn
   524  074E  3000               	movlw	0
   525  074F  00F6               	movwf	dataCtrl@dataIn+1
   526  0750  120A  118A  25F0  120A  118A  	fcall	_dataCtrl
   527                           
   528                           ;LE2.c: 105: break;
   529  0755  2FF3               	goto	l754
   530  0756                     l728:	
   531                           ;LE2.c: 106: case KEY_5:
   532                           
   533                           
   534                           ;LE2.c: 107: dataCtrl('5');
   535  0756  3035               	movlw	53
   536  0757  00F5               	movwf	dataCtrl@dataIn
   537  0758  3000               	movlw	0
   538  0759  00F6               	movwf	dataCtrl@dataIn+1
   539  075A  120A  118A  25F0  120A  118A  	fcall	_dataCtrl
   540                           
   541                           ;LE2.c: 108: break;
   542  075F  2FF3               	goto	l754
   543  0760                     l730:	
   544                           ;LE2.c: 109: case KEY_6:
   545                           
   546                           
   547                           ;LE2.c: 110: dataCtrl('6');
   548  0760  3036               	movlw	54
   549  0761  00F5               	movwf	dataCtrl@dataIn
   550  0762  3000               	movlw	0
   551  0763  00F6               	movwf	dataCtrl@dataIn+1
   552  0764  120A  118A  25F0  120A  118A  	fcall	_dataCtrl
   553                           
   554                           ;LE2.c: 111: break;
   555  0769  2FF3               	goto	l754
   556  076A                     l732:	
   557                           ;LE2.c: 112: case KEY_7:
   558                           
   559                           
   560                           ;LE2.c: 113: dataCtrl('7');
   561  076A  3037               	movlw	55
   562  076B  00F5               	movwf	dataCtrl@dataIn
   563  076C  3000               	movlw	0
   564  076D  00F6               	movwf	dataCtrl@dataIn+1
   565  076E  120A  118A  25F0  120A  118A  	fcall	_dataCtrl
   566                           
   567                           ;LE2.c: 114: break;
   568  0773  2FF3               	goto	l754
   569  0774                     l734:	
   570                           ;LE2.c: 115: case KEY_8:
   571                           
   572                           
   573                           ;LE2.c: 116: dataCtrl('8');
   574  0774  3038               	movlw	56
   575  0775  00F5               	movwf	dataCtrl@dataIn
   576  0776  3000               	movlw	0
   577  0777  00F6               	movwf	dataCtrl@dataIn+1
   578  0778  120A  118A  25F0  120A  118A  	fcall	_dataCtrl
   579                           
   580                           ;LE2.c: 117: break;
   581  077D  2FF3               	goto	l754
   582  077E                     l736:	
   583                           ;LE2.c: 118: case KEY_9:
   584                           
   585                           
   586                           ;LE2.c: 119: dataCtrl('9');
   587  077E  3039               	movlw	57
   588  077F  00F5               	movwf	dataCtrl@dataIn
   589  0780  3000               	movlw	0
   590  0781  00F6               	movwf	dataCtrl@dataIn+1
   591  0782  120A  118A  25F0  120A  118A  	fcall	_dataCtrl
   592                           
   593                           ;LE2.c: 120: break;
   594  0787  2FF3               	goto	l754
   595  0788                     l738:	
   596                           ;LE2.c: 121: case KEY_PLUS:
   597                           
   598                           
   599                           ;LE2.c: 122: dataCtrl('+');
   600  0788  302B               	movlw	43
   601  0789  00F5               	movwf	dataCtrl@dataIn
   602  078A  3000               	movlw	0
   603  078B  00F6               	movwf	dataCtrl@dataIn+1
   604  078C  120A  118A  25F0  120A  118A  	fcall	_dataCtrl
   605                           
   606                           ;LE2.c: 123: break;
   607  0791  2FF3               	goto	l754
   608  0792                     l740:	
   609                           ;LE2.c: 124: case KEY_MINUS:
   610                           
   611                           
   612                           ;LE2.c: 125: dataCtrl('-');
   613  0792  302D               	movlw	45
   614  0793  00F5               	movwf	dataCtrl@dataIn
   615  0794  3000               	movlw	0
   616  0795  00F6               	movwf	dataCtrl@dataIn+1
   617  0796  120A  118A  25F0  120A  118A  	fcall	_dataCtrl
   618                           
   619                           ;LE2.c: 126: break;
   620  079B  2FF3               	goto	l754
   621  079C                     l742:	
   622                           ;LE2.c: 127: case KEY_MULTIPLY:
   623                           
   624                           
   625                           ;LE2.c: 128: dataCtrl('*');
   626  079C  302A               	movlw	42
   627  079D  00F5               	movwf	dataCtrl@dataIn
   628  079E  3000               	movlw	0
   629  079F  00F6               	movwf	dataCtrl@dataIn+1
   630  07A0  120A  118A  25F0  120A  118A  	fcall	_dataCtrl
   631                           
   632                           ;LE2.c: 129: break;
   633  07A5  2FF3               	goto	l754
   634  07A6                     l744:	
   635                           ;LE2.c: 130: case KEY_DIVIDE:
   636                           
   637                           
   638                           ;LE2.c: 131: dataCtrl('/');
   639  07A6  302F               	movlw	47
   640  07A7  00F5               	movwf	dataCtrl@dataIn
   641  07A8  3000               	movlw	0
   642  07A9  00F6               	movwf	dataCtrl@dataIn+1
   643  07AA  120A  118A  25F0  120A  118A  	fcall	_dataCtrl
   644                           
   645                           ;LE2.c: 132: break;
   646  07AF  2FF3               	goto	l754
   647  07B0                     l746:	
   648                           ;LE2.c: 133: case KEY_EQUALS:
   649                           
   650                           
   651                           ;LE2.c: 134: dataCtrl('=');
   652  07B0  303D               	movlw	61
   653  07B1  00F5               	movwf	dataCtrl@dataIn
   654  07B2  3000               	movlw	0
   655  07B3  00F6               	movwf	dataCtrl@dataIn+1
   656  07B4  120A  118A  25F0  120A  118A  	fcall	_dataCtrl
   657                           
   658                           ;LE2.c: 135: break;
   659  07B9  2FF3               	goto	l754
   660  07BA                     l748:	
   661                           ;LE2.c: 136: default:
   662                           
   663                           
   664                           ;LE2.c: 137: isValidKey = 0;
   665  07BA  1283               	bcf	3,5	;RP0=0, select bank0
   666  07BB  1303               	bcf	3,6	;RP1=0, select bank0
   667  07BC  01A3               	clrf	readKey@isValidKey
   668  07BD  01A4               	clrf	readKey@isValidKey+1
   669                           
   670                           ;LE2.c: 139: }
   671                           
   672                           ;LE2.c: 138: break;
   673  07BE  2FF3               	goto	l754
   674  07BF                     l752:	
   675                           
   676                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   677                           ; Switch size 1, requested type "space"
   678                           ; Number of cases is 1, Range of values is 0 to 0
   679                           ; switch strategies available:
   680                           ; Name         Instructions Cycles
   681                           ; simple_byte            4     3 (average)
   682                           ; direct_byte           11     8 (fixed)
   683                           ; jumptable            260     6 (fixed)
   684                           ;	Chosen strategy is simple_byte
   685  07BF  0822               	movf	readKey@bits+1,w
   686  07C0  3A00               	xorlw	0	; case 0
   687  07C1  1903               	skipnz
   688  07C2  2FC4               	goto	l854
   689  07C3  2FBA               	goto	l748
   690  07C4                     l854:	
   691                           
   692                           ; Switch size 1, requested type "space"
   693                           ; Number of cases is 15, Range of values is 16 to 31
   694                           ; switch strategies available:
   695                           ; Name         Instructions Cycles
   696                           ; simple_byte           46    24 (average)
   697                           ; direct_byte           59    11 (fixed)
   698                           ; jumptable            263     9 (fixed)
   699                           ;	Chosen strategy is simple_byte
   700  07C4  0821               	movf	readKey@bits,w
   701  07C5  3A10               	xorlw	16	; case 16
   702  07C6  1903               	skipnz
   703  07C7  2F6A               	goto	l732
   704  07C8  3A01               	xorlw	1	; case 17
   705  07C9  1903               	skipnz
   706  07CA  2F74               	goto	l734
   707  07CB  3A03               	xorlw	3	; case 18
   708  07CC  1903               	skipnz
   709  07CD  2F7E               	goto	l736
   710  07CE  3A01               	xorlw	1	; case 19
   711  07CF  1903               	skipnz
   712  07D0  2FA6               	goto	l744
   713  07D1  3A07               	xorlw	7	; case 20
   714  07D2  1903               	skipnz
   715  07D3  2F4C               	goto	l726
   716  07D4  3A01               	xorlw	1	; case 21
   717  07D5  1903               	skipnz
   718  07D6  2F56               	goto	l728
   719  07D7  3A03               	xorlw	3	; case 22
   720  07D8  1903               	skipnz
   721  07D9  2F60               	goto	l730
   722  07DA  3A01               	xorlw	1	; case 23
   723  07DB  1903               	skipnz
   724  07DC  2F9C               	goto	l742
   725  07DD  3A0F               	xorlw	15	; case 24
   726  07DE  1903               	skipnz
   727  07DF  2F2E               	goto	l720
   728  07E0  3A01               	xorlw	1	; case 25
   729  07E1  1903               	skipnz
   730  07E2  2F38               	goto	l722
   731  07E3  3A03               	xorlw	3	; case 26
   732  07E4  1903               	skipnz
   733  07E5  2F42               	goto	l724
   734  07E6  3A01               	xorlw	1	; case 27
   735  07E7  1903               	skipnz
   736  07E8  2F92               	goto	l740
   737  07E9  3A06               	xorlw	6	; case 29
   738  07EA  1903               	skipnz
   739  07EB  2F24               	goto	l718
   740  07EC  3A03               	xorlw	3	; case 30
   741  07ED  1903               	skipnz
   742  07EE  2FB0               	goto	l746
   743  07EF  3A01               	xorlw	1	; case 31
   744  07F0  1903               	skipnz
   745  07F1  2F88               	goto	l738
   746  07F2  2FBA               	goto	l748
   747  07F3                     l754:	
   748                           
   749                           ;LE2.c: 140: return isValidKey;
   750  07F3  1283               	bcf	3,5	;RP0=0, select bank0
   751  07F4  1303               	bcf	3,6	;RP1=0, select bank0
   752  07F5  0824               	movf	readKey@isValidKey+1,w
   753  07F6  01F8               	clrf	?_readKey+1
   754  07F7  07F8               	addwf	?_readKey+1,f
   755  07F8  0823               	movf	readKey@isValidKey,w
   756  07F9  01F7               	clrf	?_readKey
   757  07FA  07F7               	addwf	?_readKey,f
   758  07FB  0008               	return
   759  07FC                     __end_of_readKey:	
   760                           
   761                           	psect	text2
   762  05F0                     __ptext2:	
   763 ;; *************** function _dataCtrl *****************
   764 ;; Defined at:
   765 ;;		line 60 in file "C:\Users\notjo\OneDrive\Desktop\USC\USC-Year3-Sem2\3201-EmbeddedSystems\Labs\LE_02\LE2.c"
   766 ;; Parameters:    Size  Location     Type
   767 ;;  dataIn          2    5[COMMON] int 
   768 ;; Auto vars:     Size  Location     Type
   769 ;;		None
   770 ;; Return value:  Size  Location     Type
   771 ;;		None               void
   772 ;; Registers used:
   773 ;;		wreg, status,2, status,0, pclath, cstack
   774 ;; Tracked objects:
   775 ;;		On entry : 0/0
   776 ;;		On exit  : 0/0
   777 ;;		Unchanged: 0/0
   778 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   779 ;;      Params:         2       0       0       0       0
   780 ;;      Locals:         0       0       0       0       0
   781 ;;      Temps:          0       0       0       0       0
   782 ;;      Totals:         2       0       0       0       0
   783 ;;Total ram usage:        2 bytes
   784 ;; Hardware stack levels used:    1
   785 ;; Hardware stack levels required when called:    1
   786 ;; This function calls:
   787 ;;		_delay
   788 ;; This function is called by:
   789 ;;		_readKey
   790 ;; This function uses a non-reentrant model
   791 ;;
   792                           
   793                           
   794                           ;psect for function _dataCtrl
   795  05F0                     _dataCtrl:	
   796                           
   797                           ;LE2.c: 63: PORTB = dataIn;
   798                           
   799                           ;incstack = 0
   800                           ; Regs used in _dataCtrl: [wreg+status,2+status,0+pclath+cstack]
   801  05F0  0875               	movf	dataCtrl@dataIn,w
   802  05F1  1283               	bcf	3,5	;RP0=0, select bank0
   803  05F2  1303               	bcf	3,6	;RP1=0, select bank0
   804  05F3  0086               	movwf	6	;volatile
   805                           
   806                           ;LE2.c: 64: delay(1000);
   807  05F4  30E8               	movlw	232
   808  05F5  00F0               	movwf	delay@timeIn
   809  05F6  3003               	movlw	3
   810  05F7  00F1               	movwf	delay@timeIn+1
   811  05F8  120A  118A  25B3  120A  118A  	fcall	_delay
   812                           
   813                           ;LE2.c: 66: PORTC = 0x06;
   814  05FD  3006               	movlw	6
   815  05FE  1283               	bcf	3,5	;RP0=0, select bank0
   816  05FF  1303               	bcf	3,6	;RP1=0, select bank0
   817  0600  0087               	movwf	7	;volatile
   818                           
   819                           ;LE2.c: 67: delay(1000);
   820  0601  30E8               	movlw	232
   821  0602  00F0               	movwf	delay@timeIn
   822  0603  3003               	movlw	3
   823  0604  00F1               	movwf	delay@timeIn+1
   824  0605  120A  118A  25B3  120A  118A  	fcall	_delay
   825                           
   826                           ;LE2.c: 69: PORTC = 0x02;
   827  060A  3002               	movlw	2
   828  060B  1283               	bcf	3,5	;RP0=0, select bank0
   829  060C  1303               	bcf	3,6	;RP1=0, select bank0
   830  060D  0087               	movwf	7	;volatile
   831                           
   832                           ;LE2.c: 70: delay(1000);
   833  060E  30E8               	movlw	232
   834  060F  00F0               	movwf	delay@timeIn
   835  0610  3003               	movlw	3
   836  0611  00F1               	movwf	delay@timeIn+1
   837  0612  120A  118A  25B3   	fcall	_delay
   838                           
   839                           ;LE2.c: 72: PORTC = 0x00;
   840  0615  1283               	bcf	3,5	;RP0=0, select bank0
   841  0616  1303               	bcf	3,6	;RP1=0, select bank0
   842  0617  0187               	clrf	7	;volatile
   843  0618  0008               	return
   844  0619                     __end_of_dataCtrl:	
   845                           
   846                           	psect	text3
   847  0619                     __ptext3:	
   848 ;; *************** function _initLCD *****************
   849 ;; Defined at:
   850 ;;		line 75 in file "C:\Users\notjo\OneDrive\Desktop\USC\USC-Year3-Sem2\3201-EmbeddedSystems\Labs\LE_02\LE2.c"
   851 ;; Parameters:    Size  Location     Type
   852 ;;		None
   853 ;; Auto vars:     Size  Location     Type
   854 ;;		None
   855 ;; Return value:  Size  Location     Type
   856 ;;		None               void
   857 ;; Registers used:
   858 ;;		wreg, status,2, status,0, pclath, cstack
   859 ;; Tracked objects:
   860 ;;		On entry : 0/0
   861 ;;		On exit  : 0/0
   862 ;;		Unchanged: 0/0
   863 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   864 ;;      Params:         0       0       0       0       0
   865 ;;      Locals:         0       0       0       0       0
   866 ;;      Temps:          0       0       0       0       0
   867 ;;      Totals:         0       0       0       0       0
   868 ;;Total ram usage:        0 bytes
   869 ;; Hardware stack levels used:    1
   870 ;; Hardware stack levels required when called:    2
   871 ;; This function calls:
   872 ;;		_delay
   873 ;;		_instCtrl
   874 ;; This function is called by:
   875 ;;		_main
   876 ;; This function uses a non-reentrant model
   877 ;;
   878                           
   879                           
   880                           ;psect for function _initLCD
   881  0619                     _initLCD:	
   882                           
   883                           ;LE2.c: 77: delay(1000);
   884                           
   885                           ;incstack = 0
   886                           ; Regs used in _initLCD: [wreg+status,2+status,0+pclath+cstack]
   887  0619  30E8               	movlw	232
   888  061A  00F0               	movwf	delay@timeIn
   889  061B  3003               	movlw	3
   890  061C  00F1               	movwf	delay@timeIn+1
   891  061D  120A  118A  25B3  120A  118A  	fcall	_delay
   892                           
   893                           ;LE2.c: 78: instCtrl(0x38);
   894  0622  3038               	movlw	56
   895  0623  00F5               	movwf	instCtrl@dataIn
   896  0624  3000               	movlw	0
   897  0625  00F6               	movwf	instCtrl@dataIn+1
   898  0626  120A  118A  25C8  120A  118A  	fcall	_instCtrl
   899                           
   900                           ;LE2.c: 79: instCtrl(0x08);
   901  062B  3008               	movlw	8
   902  062C  00F5               	movwf	instCtrl@dataIn
   903  062D  3000               	movlw	0
   904  062E  00F6               	movwf	instCtrl@dataIn+1
   905  062F  120A  118A  25C8  120A  118A  	fcall	_instCtrl
   906                           
   907                           ;LE2.c: 80: instCtrl(0x01);
   908  0634  3001               	movlw	1
   909  0635  00F5               	movwf	instCtrl@dataIn
   910  0636  3000               	movlw	0
   911  0637  00F6               	movwf	instCtrl@dataIn+1
   912  0638  120A  118A  25C8  120A  118A  	fcall	_instCtrl
   913                           
   914                           ;LE2.c: 81: instCtrl(0x06);
   915  063D  3006               	movlw	6
   916  063E  00F5               	movwf	instCtrl@dataIn
   917  063F  3000               	movlw	0
   918  0640  00F6               	movwf	instCtrl@dataIn+1
   919  0641  120A  118A  25C8  120A  118A  	fcall	_instCtrl
   920                           
   921                           ;LE2.c: 82: instCtrl(0x0C);
   922  0646  300C               	movlw	12
   923  0647  00F5               	movwf	instCtrl@dataIn
   924  0648  3000               	movlw	0
   925  0649  00F6               	movwf	instCtrl@dataIn+1
   926  064A  120A  118A  25C8   	fcall	_instCtrl
   927  064D  0008               	return
   928  064E                     __end_of_initLCD:	
   929                           
   930                           	psect	text4
   931  05C8                     __ptext4:	
   932 ;; *************** function _instCtrl *****************
   933 ;; Defined at:
   934 ;;		line 45 in file "C:\Users\notjo\OneDrive\Desktop\USC\USC-Year3-Sem2\3201-EmbeddedSystems\Labs\LE_02\LE2.c"
   935 ;; Parameters:    Size  Location     Type
   936 ;;  dataIn          2    5[COMMON] int 
   937 ;; Auto vars:     Size  Location     Type
   938 ;;		None
   939 ;; Return value:  Size  Location     Type
   940 ;;		None               void
   941 ;; Registers used:
   942 ;;		wreg, status,2, status,0, pclath, cstack
   943 ;; Tracked objects:
   944 ;;		On entry : 0/0
   945 ;;		On exit  : 0/0
   946 ;;		Unchanged: 0/0
   947 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   948 ;;      Params:         2       0       0       0       0
   949 ;;      Locals:         0       0       0       0       0
   950 ;;      Temps:          0       0       0       0       0
   951 ;;      Totals:         2       0       0       0       0
   952 ;;Total ram usage:        2 bytes
   953 ;; Hardware stack levels used:    1
   954 ;; Hardware stack levels required when called:    1
   955 ;; This function calls:
   956 ;;		_delay
   957 ;; This function is called by:
   958 ;;		_initLCD
   959 ;;		_main
   960 ;; This function uses a non-reentrant model
   961 ;;
   962                           
   963                           
   964                           ;psect for function _instCtrl
   965  05C8                     _instCtrl:	
   966                           
   967                           ;LE2.c: 48: PORTB = dataIn;
   968                           
   969                           ;incstack = 0
   970                           ; Regs used in _instCtrl: [wreg+status,2+status,0+pclath+cstack]
   971  05C8  0875               	movf	instCtrl@dataIn,w
   972  05C9  1283               	bcf	3,5	;RP0=0, select bank0
   973  05CA  1303               	bcf	3,6	;RP1=0, select bank0
   974  05CB  0086               	movwf	6	;volatile
   975                           
   976                           ;LE2.c: 49: delay(1000);
   977  05CC  30E8               	movlw	232
   978  05CD  00F0               	movwf	delay@timeIn
   979  05CE  3003               	movlw	3
   980  05CF  00F1               	movwf	delay@timeIn+1
   981  05D0  120A  118A  25B3  120A  118A  	fcall	_delay
   982                           
   983                           ;LE2.c: 51: PORTC = 0x04;
   984  05D5  3004               	movlw	4
   985  05D6  1283               	bcf	3,5	;RP0=0, select bank0
   986  05D7  1303               	bcf	3,6	;RP1=0, select bank0
   987  05D8  0087               	movwf	7	;volatile
   988                           
   989                           ;LE2.c: 52: delay(1000);
   990  05D9  30E8               	movlw	232
   991  05DA  00F0               	movwf	delay@timeIn
   992  05DB  3003               	movlw	3
   993  05DC  00F1               	movwf	delay@timeIn+1
   994  05DD  120A  118A  25B3  120A  118A  	fcall	_delay
   995                           
   996                           ;LE2.c: 54: PORTC = 0x00;
   997  05E2  1283               	bcf	3,5	;RP0=0, select bank0
   998  05E3  1303               	bcf	3,6	;RP1=0, select bank0
   999  05E4  0187               	clrf	7	;volatile
  1000                           
  1001                           ;LE2.c: 55: delay(1000);
  1002  05E5  30E8               	movlw	232
  1003  05E6  00F0               	movwf	delay@timeIn
  1004  05E7  3003               	movlw	3
  1005  05E8  00F1               	movwf	delay@timeIn+1
  1006  05E9  120A  118A  25B3   	fcall	_delay
  1007                           
  1008                           ;LE2.c: 57: PORTC = 0x00;
  1009  05EC  1283               	bcf	3,5	;RP0=0, select bank0
  1010  05ED  1303               	bcf	3,6	;RP1=0, select bank0
  1011  05EE  0187               	clrf	7	;volatile
  1012  05EF  0008               	return
  1013  05F0                     __end_of_instCtrl:	
  1014                           
  1015                           	psect	text5
  1016  05B3                     __ptext5:	
  1017 ;; *************** function _delay *****************
  1018 ;; Defined at:
  1019 ;;		line 40 in file "C:\Users\notjo\OneDrive\Desktop\USC\USC-Year3-Sem2\3201-EmbeddedSystems\Labs\LE_02\LE2.c"
  1020 ;; Parameters:    Size  Location     Type
  1021 ;;  timeIn          2    0[COMMON] int 
  1022 ;; Auto vars:     Size  Location     Type
  1023 ;;  j               2    3[COMMON] int 
  1024 ;; Return value:  Size  Location     Type
  1025 ;;		None               void
  1026 ;; Registers used:
  1027 ;;		wreg, status,2
  1028 ;; Tracked objects:
  1029 ;;		On entry : 0/0
  1030 ;;		On exit  : 0/0
  1031 ;;		Unchanged: 0/0
  1032 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1033 ;;      Params:         2       0       0       0       0
  1034 ;;      Locals:         2       0       0       0       0
  1035 ;;      Temps:          1       0       0       0       0
  1036 ;;      Totals:         5       0       0       0       0
  1037 ;;Total ram usage:        5 bytes
  1038 ;; Hardware stack levels used:    1
  1039 ;; This function calls:
  1040 ;;		Nothing
  1041 ;; This function is called by:
  1042 ;;		_instCtrl
  1043 ;;		_dataCtrl
  1044 ;;		_initLCD
  1045 ;; This function uses a non-reentrant model
  1046 ;;
  1047                           
  1048                           
  1049                           ;psect for function _delay
  1050  05B3                     _delay:	
  1051                           
  1052                           ;LE2.c: 42: for (int j = 0; j < timeIn; j++);
  1053                           
  1054                           ;incstack = 0
  1055                           ; Regs used in _delay: [wreg+status,2]
  1056  05B3  01F3               	clrf	delay@j
  1057  05B4  01F4               	clrf	delay@j+1
  1058  05B5                     l17:	
  1059  05B5  0874               	movf	delay@j+1,w
  1060  05B6  3A80               	xorlw	128
  1061  05B7  00F2               	movwf	??_delay
  1062  05B8  0871               	movf	delay@timeIn+1,w
  1063  05B9  3A80               	xorlw	128
  1064  05BA  0272               	subwf	??_delay,w
  1065  05BB  1D03               	skipz
  1066  05BC  2DBF               	goto	u185
  1067  05BD  0870               	movf	delay@timeIn,w
  1068  05BE  0273               	subwf	delay@j,w
  1069  05BF                     u185:	
  1070  05BF  1803               	btfsc	3,0
  1071  05C0  0008               	return
  1072  05C1  3001               	movlw	1
  1073  05C2  07F3               	addwf	delay@j,f
  1074  05C3  1803               	skipnc
  1075  05C4  0AF4               	incf	delay@j+1,f
  1076  05C5  3000               	movlw	0
  1077  05C6  07F4               	addwf	delay@j+1,f
  1078  05C7  2DB5               	goto	l17
  1079  05C8                     __end_of_delay:	
  1080                           
  1081                           	psect	text6
  1082  064E                     __ptext6:	
  1083 ;; *************** function ___awmod *****************
  1084 ;; Defined at:
  1085 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\awmod.c"
  1086 ;; Parameters:    Size  Location     Type
  1087 ;;  divisor         2    0[COMMON] int 
  1088 ;;  dividend        2    2[COMMON] int 
  1089 ;; Auto vars:     Size  Location     Type
  1090 ;;  sign            1    6[COMMON] unsigned char 
  1091 ;;  counter         1    5[COMMON] unsigned char 
  1092 ;; Return value:  Size  Location     Type
  1093 ;;                  2    0[COMMON] int 
  1094 ;; Registers used:
  1095 ;;		wreg, status,2, status,0
  1096 ;; Tracked objects:
  1097 ;;		On entry : 0/0
  1098 ;;		On exit  : 0/0
  1099 ;;		Unchanged: 0/0
  1100 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1101 ;;      Params:         4       0       0       0       0
  1102 ;;      Locals:         2       0       0       0       0
  1103 ;;      Temps:          1       0       0       0       0
  1104 ;;      Totals:         7       0       0       0       0
  1105 ;;Total ram usage:        7 bytes
  1106 ;; Hardware stack levels used:    1
  1107 ;; This function calls:
  1108 ;;		Nothing
  1109 ;; This function is called by:
  1110 ;;		_main
  1111 ;; This function uses a non-reentrant model
  1112 ;;
  1113                           
  1114                           
  1115                           ;psect for function ___awmod
  1116  064E                     ___awmod:	
  1117                           
  1118                           ;incstack = 0
  1119                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  1120  064E  01F6               	clrf	___awmod@sign
  1121  064F  1FF3               	btfss	___awmod@dividend+1,7
  1122  0650  2E58               	goto	l770
  1123  0651  09F2               	comf	___awmod@dividend,f
  1124  0652  09F3               	comf	___awmod@dividend+1,f
  1125  0653  0AF2               	incf	___awmod@dividend,f
  1126  0654  1903               	skipnz
  1127  0655  0AF3               	incf	___awmod@dividend+1,f
  1128  0656  01F6               	clrf	___awmod@sign
  1129  0657  0AF6               	incf	___awmod@sign,f
  1130  0658                     l770:	
  1131  0658  1FF1               	btfss	___awmod@divisor+1,7
  1132  0659  2E5F               	goto	l774
  1133  065A  09F0               	comf	___awmod@divisor,f
  1134  065B  09F1               	comf	___awmod@divisor+1,f
  1135  065C  0AF0               	incf	___awmod@divisor,f
  1136  065D  1903               	skipnz
  1137  065E  0AF1               	incf	___awmod@divisor+1,f
  1138  065F                     l774:	
  1139  065F  0871               	movf	___awmod@divisor+1,w
  1140  0660  0470               	iorwf	___awmod@divisor,w
  1141  0661  1903               	skipnz
  1142  0662  2E8C               	goto	l792
  1143  0663  01F5               	clrf	___awmod@counter
  1144  0664  0AF5               	incf	___awmod@counter,f
  1145  0665                     l782:	
  1146  0665  1BF1               	btfsc	___awmod@divisor+1,7
  1147  0666  2E73               	goto	l784
  1148  0667  3001               	movlw	1
  1149  0668                     u225:	
  1150  0668  1003               	clrc
  1151  0669  0DF0               	rlf	___awmod@divisor,f
  1152  066A  0DF1               	rlf	___awmod@divisor+1,f
  1153  066B  3EFF               	addlw	-1
  1154  066C  1D03               	skipz
  1155  066D  2E68               	goto	u225
  1156  066E  3001               	movlw	1
  1157  066F  00F4               	movwf	??___awmod
  1158  0670  0874               	movf	??___awmod,w
  1159  0671  07F5               	addwf	___awmod@counter,f
  1160  0672  2E65               	goto	l782
  1161  0673                     l784:	
  1162  0673  0871               	movf	___awmod@divisor+1,w
  1163  0674  0273               	subwf	___awmod@dividend+1,w
  1164  0675  1D03               	skipz
  1165  0676  2E79               	goto	u245
  1166  0677  0870               	movf	___awmod@divisor,w
  1167  0678  0272               	subwf	___awmod@dividend,w
  1168  0679                     u245:	
  1169  0679  1C03               	skipc
  1170  067A  2E81               	goto	l788
  1171  067B  0870               	movf	___awmod@divisor,w
  1172  067C  02F2               	subwf	___awmod@dividend,f
  1173  067D  0871               	movf	___awmod@divisor+1,w
  1174  067E  1C03               	skipc
  1175  067F  03F3               	decf	___awmod@dividend+1,f
  1176  0680  02F3               	subwf	___awmod@dividend+1,f
  1177  0681                     l788:	
  1178  0681  3001               	movlw	1
  1179  0682                     u255:	
  1180  0682  1003               	clrc
  1181  0683  0CF1               	rrf	___awmod@divisor+1,f
  1182  0684  0CF0               	rrf	___awmod@divisor,f
  1183  0685  3EFF               	addlw	-1
  1184  0686  1D03               	skipz
  1185  0687  2E82               	goto	u255
  1186  0688  3001               	movlw	1
  1187  0689  02F5               	subwf	___awmod@counter,f
  1188  068A  1D03               	btfss	3,2
  1189  068B  2E73               	goto	l784
  1190  068C                     l792:	
  1191  068C  0876               	movf	___awmod@sign,w
  1192  068D  1903               	btfsc	3,2
  1193  068E  2E94               	goto	l796
  1194  068F  09F2               	comf	___awmod@dividend,f
  1195  0690  09F3               	comf	___awmod@dividend+1,f
  1196  0691  0AF2               	incf	___awmod@dividend,f
  1197  0692  1903               	skipnz
  1198  0693  0AF3               	incf	___awmod@dividend+1,f
  1199  0694                     l796:	
  1200  0694  0873               	movf	___awmod@dividend+1,w
  1201  0695  01F1               	clrf	?___awmod+1
  1202  0696  07F1               	addwf	?___awmod+1,f
  1203  0697  0872               	movf	___awmod@dividend,w
  1204  0698  01F0               	clrf	?___awmod
  1205  0699  07F0               	addwf	?___awmod,f
  1206  069A  0008               	return
  1207  069B                     __end_of___awmod:	
  1208  007E                     btemp	set	126	;btemp
  1209  007E                     wtemp	set	126
  1210  007E                     wtemp0	set	126
  1211  0080                     wtemp1	set	128
  1212  0082                     wtemp2	set	130
  1213  0084                     wtemp3	set	132
  1214  0086                     wtemp4	set	134
  1215  0088                     wtemp5	set	136
  1216  007F                     wtemp6	set	127
  1217  007E                     ttemp	set	126
  1218  007E                     ttemp0	set	126
  1219  0081                     ttemp1	set	129
  1220  0084                     ttemp2	set	132
  1221  0087                     ttemp3	set	135
  1222  007F                     ttemp4	set	127
  1223  007E                     ltemp	set	126
  1224  007E                     ltemp0	set	126
  1225  0082                     ltemp1	set	130
  1226  0086                     ltemp2	set	134
  1227  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     11      11
    BANK0            80      9       9
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    readKey@rowCount	PTR int  size(1) Largest target is 2
		 -> main@rowCount(BANK0[2]), 


Critical Paths under _main in COMMON

    _main->_readKey
    _readKey->_dataCtrl
    _dataCtrl->_delay
    _initLCD->_instCtrl
    _instCtrl->_delay

Critical Paths under _main in BANK0

    _main->_readKey

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     4      0    4117
                                              5 BANK0      4     4      0
                            ___awmod
                            _initLCD
                           _instCtrl
                            _readKey
 ---------------------------------------------------------------------------------
 (1) _readKey                                              9     7      2    1308
                                              7 COMMON     4     2      2
                                              0 BANK0      5     5      0
                           _dataCtrl
 ---------------------------------------------------------------------------------
 (2) _dataCtrl                                             2     0      2    1234
                                              5 COMMON     2     0      2
                              _delay
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              0     0      0    1333
                              _delay
                           _instCtrl
 ---------------------------------------------------------------------------------
 (1) _instCtrl                                             2     0      2     916
                                              5 COMMON     2     0      2
                              _delay
 ---------------------------------------------------------------------------------
 (3) _delay                                                5     3      2     417
                                              0 COMMON     5     3      2
 ---------------------------------------------------------------------------------
 (1) ___awmod                                              7     3      4     402
                                              0 COMMON     7     3      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   ___awmod
   _initLCD
     _delay
     _instCtrl
       _delay
   _instCtrl
     _delay
   _readKey
     _dataCtrl
       _delay

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      B       B       1       78.6%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50      9       9       5       11.3%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0       0      12        0.0%


Microchip Technology PIC Macro Assembler V1.33 build 59893 
Symbol Table                                                                                   Wed Feb 07 22:01:01 2024

            __CFG_CP$OFF 0000                       l17 05B5                      l720 072E  
                    l730 0760                      l722 0738                      l740 0792  
                    l732 076A                      l724 0742                      l820 06E2  
                    l742 079C                      l734 0774                      l726 074C  
                    l718 0724                      l806 06AA                      l744 07A6  
                    l736 077E                      l728 0756                      l752 07BF  
                    l824 06EB                      l770 0658                      l746 07B0  
                    l738 0788                      l754 07F3                      l748 07BA  
                    l828 06FB                      l782 0665                      l774 065F  
                    l854 07C4                      l784 0673                      l792 068C  
                    l796 0694                      l788 0681                      _RD4 0044  
                    u225 0668                      u245 0679                      u255 0682  
                    u185 05BF                      u345 0706             __CFG_CPD$OFF 0000  
        readKey@rowCount 0020             ___awmod@sign 0076             __CFG_FOSC$XT 0000  
           __CFG_LVP$OFF 0000           instCtrl@dataIn 0075             __CFG_WRT$OFF 0000  
                   _main 069B                     btemp 007E            __CFG_BOREN$ON 0000  
                   ltemp 007E                     start 0000                     ttemp 007E  
                   wtemp 007E                    ?_main 0070            __CFG_WDTE$OFF 0000  
        __end_of___awmod 069B                    _PORTB 0006                    _PORTC 0007  
                  _PORTD 0008                    _TRISB 0086                    _TRISC 0087  
                  _TRISD 0088            __CFG_PWRTE$ON 0000          __end_of_initLCD 064E  
                  _delay 05B3          __end_of_readKey 07FC             main@rowCount 0027  
                  ltemp0 007E                    ltemp1 0082                    ltemp2 0086  
                  ltemp3 0080                    ttemp0 007E                    ttemp1 0081  
                  ttemp2 0084                    ttemp3 0087                    ttemp4 007F  
                  status 0003                    wtemp0 007E                    wtemp1 0080  
                  wtemp2 0082                    wtemp3 0084                    wtemp4 0086  
                  wtemp5 0088                    wtemp6 007F          __initialization 07FC  
           __end_of_main 0716                   ??_main 007B                   ?_delay 0070  
            readKey@bits 0021         __end_of_dataCtrl 0619                ??___awmod 0074  
                 delay@j 0073          ___awmod@divisor 0070         __end_of_instCtrl 05F0  
        ___awmod@counter 0075                ??_initLCD 0077                ??_readKey 0079  
__end_of__initialization 07FC           __pcstackCOMMON 0070            __end_of_delay 05C8  
                ??_delay 0072               __pmaintext 069B           main@isValidKey 0025  
         dataCtrl@dataIn 0075                ?_dataCtrl 0075                ?_instCtrl 0075  
                ___awmod 064E                  __ptext0 0000                  __ptext1 0716  
                __ptext2 05F0                  __ptext3 0619                  __ptext4 05C8  
                __ptext5 05B3                  __ptext6 064E                  _initLCD 0619  
                _readKey 0716               ??_dataCtrl 0077         ___awmod@dividend 0072  
   end_of_initialization 07FC               ??_instCtrl 0077      start_initialization 07FC  
              ___latbits 0002            __pcstackBANK0 0020        __size_of_dataCtrl 0029  
      __size_of_instCtrl 0028                 ?___awmod 0070                 ?_initLCD 0070  
               ?_readKey 0077           __size_of_delay 0015         __size_of___awmod 004D  
               _dataCtrl 05F0         __size_of_initLCD 0035         __size_of_readKey 00E6  
          __size_of_main 007B                 _instCtrl 05C8              delay@timeIn 0070  
      readKey@isValidKey 0023  
