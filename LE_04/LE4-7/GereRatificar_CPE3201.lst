

Microchip Technology PIC LITE Macro Assembler V1.33 build 59893 
                                                                                               Mon Mar 11 15:44:09 2024

Microchip Technology Omniscient Code Generator (Lite mode) build 59893
     1                           	processor	16F877A
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	inittext,global,class=CODE,delta=2
     9                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    10                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	maintext,global,class=CODE,split=1,delta=2
    13                           	psect	text1,local,class=CODE,merge=1,delta=2
    14                           	psect	text2,local,class=CODE,merge=1,delta=2
    15                           	psect	text3,local,class=CODE,merge=1,delta=2
    16                           	psect	text4,local,class=CODE,merge=1,delta=2
    17                           	psect	text5,local,class=CODE,merge=1,delta=2
    18                           	psect	intentry,global,class=CODE,delta=2
    19                           	dabs	1,0x7E,2
    20  0000                     	;# 
    21  0001                     	;# 
    22  0002                     	;# 
    23  0003                     	;# 
    24  0004                     	;# 
    25  0005                     	;# 
    26  0006                     	;# 
    27  0007                     	;# 
    28  0008                     	;# 
    29  0009                     	;# 
    30  000A                     	;# 
    31  000B                     	;# 
    32  000C                     	;# 
    33  000D                     	;# 
    34  000E                     	;# 
    35  000E                     	;# 
    36  000F                     	;# 
    37  0010                     	;# 
    38  0011                     	;# 
    39  0012                     	;# 
    40  0013                     	;# 
    41  0014                     	;# 
    42  0015                     	;# 
    43  0015                     	;# 
    44  0016                     	;# 
    45  0017                     	;# 
    46  0018                     	;# 
    47  0019                     	;# 
    48  001A                     	;# 
    49  001B                     	;# 
    50  001B                     	;# 
    51  001C                     	;# 
    52  001D                     	;# 
    53  001E                     	;# 
    54  001F                     	;# 
    55  0081                     	;# 
    56  0085                     	;# 
    57  0086                     	;# 
    58  0087                     	;# 
    59  0088                     	;# 
    60  0089                     	;# 
    61  008C                     	;# 
    62  008D                     	;# 
    63  008E                     	;# 
    64  0091                     	;# 
    65  0092                     	;# 
    66  0093                     	;# 
    67  0094                     	;# 
    68  0098                     	;# 
    69  0099                     	;# 
    70  009C                     	;# 
    71  009D                     	;# 
    72  009E                     	;# 
    73  009F                     	;# 
    74  010C                     	;# 
    75  010D                     	;# 
    76  010E                     	;# 
    77  010F                     	;# 
    78  018C                     	;# 
    79  018D                     	;# 
    80                           
    81                           	psect	idataBANK0
    82  00E1                     __pidataBANK0:	
    83                           
    84                           ;initializer for _maxCountDC1
    85  00E1  341D               	retlw	29
    86  00E2  34FB               	retlw	251
    87  00E3  3482               	retlw	130
    88  00E4  34FF               	retlw	255
    89  00E5  34F2               	retlw	242
    90  00E6  34FF               	retlw	255
    91  00E7  34CA               	retlw	202
    92  00E8  34F3               	retlw	243
    93  00E9  34C6               	retlw	198
    94  00EA  34FE               	retlw	254
    95  00EB  34DF               	retlw	223
    96  00EC  34FF               	retlw	255
    97  00ED  3495               	retlw	149
    98  00EE  34E7               	retlw	231
    99  00EF  348E               	retlw	142
   100  00F0  34FD               	retlw	253
   101  00F1  34C0               	retlw	192
   102  00F2  34FF               	retlw	255
   103  00F3  3460               	retlw	96
   104  00F4  34DB               	retlw	219
   105  00F5  3455               	retlw	85
   106  00F6  34FC               	retlw	252
   107  00F7  34A1               	retlw	161
   108  00F8  34FF               	retlw	255
   109  00F9  349C               	retlw	156
   110  00FA  34D1               	retlw	209
   111  00FB  345B               	retlw	91
   112  00FC  34FB               	retlw	251
   113  00FD  3488               	retlw	136
   114  00FE  34FF               	retlw	255
   115                           
   116                           ;initializer for _maxCountDC2
   117  00FF  340D               	retlw	13
   118  0100  34D4               	retlw	212
   119  0101  349A               	retlw	154
   120  0102  34FB               	retlw	251
   121  0103  348E               	retlw	142
   122  0104  34FF               	retlw	255
   123  0105  3460               	retlw	96
   124  0106  34DB               	retlw	219
   125  0107  3455               	retlw	85
   126  0108  34FC               	retlw	252
   127  0109  34A1               	retlw	161
   128  010A  34FF               	retlw	255
   129  010B  3495               	retlw	149
   130  010C  34E7               	retlw	231
   131  010D  348E               	retlw	142
   132  010E  34FD               	retlw	253
   133  010F  34C0               	retlw	192
   134  0110  34FF               	retlw	255
   135  0111  34CA               	retlw	202
   136  0112  34F3               	retlw	243
   137  0113  34C6               	retlw	198
   138  0114  34FE               	retlw	254
   139  0115  34DF               	retlw	223
   140  0116  34FF               	retlw	255
   141  0117  348E               	retlw	142
   142  0118  34FD               	retlw	253
   143  0119  34C0               	retlw	192
   144  011A  34FF               	retlw	255
   145  011B  34F8               	retlw	248
   146  011C  34FF               	retlw	255
   147                           
   148                           ;initializer for _dutyCycles
   149  011D  340A               	retlw	10
   150  011E  3400               	retlw	0
   151  011F  3419               	retlw	25
   152  0120  3400               	retlw	0
   153  0121  3432               	retlw	50
   154  0122  3400               	retlw	0
   155  0123  344B               	retlw	75
   156  0124  3400               	retlw	0
   157  0125  345F               	retlw	95
   158  0126  3400               	retlw	0
   159                           
   160                           ;initializer for _frequencies
   161  0127  340A               	retlw	10
   162  0128  3400               	retlw	0
   163  0129  3464               	retlw	100
   164  012A  3400               	retlw	0
   165  012B  34E8               	retlw	232
   166  012C  3403               	retlw	3
   167                           
   168                           ;initializer for _flag
   169  012D  3401               	retlw	1
   170  012E  3400               	retlw	0
   171  000E                     _TMR1	set	14
   172  0010                     _T1CON	set	16
   173  005F                     _GIE	set	95
   174  005E                     _PEIE	set	94
   175  0028                     _RA0	set	40
   176  0040                     _RD0	set	64
   177  0041                     _RD1	set	65
   178  0060                     _TMR1IF	set	96
   179  0080                     _TMR1ON	set	128
   180  009F                     _ADCON1	set	159
   181  0085                     _TRISA	set	133
   182  0088                     _TRISD	set	136
   183  0460                     _TMR1IE	set	1120
   184                           
   185                           ; #config settings
   186  0000                     
   187                           	psect	cinit
   188  0015                     start_initialization:	
   189  0015                     __initialization:	
   190                           
   191                           ; Clear objects allocated to COMMON
   192  0015  01F0               	clrf	__pbssCOMMON& (0+127)
   193  0016  01F1               	clrf	(__pbssCOMMON+1)& (0+127)
   194  0017  01F2               	clrf	(__pbssCOMMON+2)& (0+127)
   195  0018  01F3               	clrf	(__pbssCOMMON+3)& (0+127)
   196  0019  01F4               	clrf	(__pbssCOMMON+4)& (0+127)
   197  001A  01F5               	clrf	(__pbssCOMMON+5)& (0+127)
   198                           
   199                           ; Initialize objects allocated to BANK0
   200  001B  1383               	bcf	3,7	;select IRP bank0
   201  001C  306E               	movlw	low (__pdataBANK0+78)
   202  001D  00FD               	movwf	btemp+-1
   203  001E  3000               	movlw	high __pidataBANK0
   204  001F  00FE               	movwf	btemp
   205  0020  30E1               	movlw	low __pidataBANK0
   206  0021  00FF               	movwf	btemp+1
   207  0022  3020               	movlw	low __pdataBANK0
   208  0023  0084               	movwf	4
   209  0024  120A  118A  21CA   	fcall	init_ram0
   210  0027                     end_of_initialization:	
   211                           ;End of C runtime variable initialization code
   212                           
   213  0027                     __end_of__initialization:	
   214  0027  0183               	clrf	3
   215  0028  120A  118A  299A   	ljmp	_main	;jump to C main() function
   216                           
   217                           	psect	bssCOMMON
   218  0070                     __pbssCOMMON:	
   219  0070                     _dutyCycleIndex:	
   220  0070                     	ds	2
   221  0072                     _frequencyIndex:	
   222  0072                     	ds	2
   223  0074                     _maxCountIndex1:	
   224  0074                     	ds	2
   225                           
   226                           	psect	dataBANK0
   227  0020                     __pdataBANK0:	
   228  0020                     _maxCountDC1:	
   229  0020                     	ds	30
   230  003E                     _maxCountDC2:	
   231  003E                     	ds	30
   232  005C                     _dutyCycles:	
   233  005C                     	ds	10
   234  0066                     _frequencies:	
   235  0066                     	ds	6
   236  006C                     _flag:	
   237  006C                     	ds	2
   238                           
   239                           	psect	inittext
   240  01C6                     init_fetch0:	
   241                           ;	Called with low address in FSR and high address in W
   242                           
   243  01C6  087E               	movf	126,w
   244  01C7  008A               	movwf	10
   245  01C8  087F               	movf	127,w
   246  01C9  0082               	movwf	2
   247  01CA                     init_ram0:	
   248                           ;Called with:
   249                           ;	high address of idata address in btemp 
   250                           ;	low address of idata address in btemp+1 
   251                           ;	low address of data in FSR
   252                           ;	high address + 1 of data in btemp-1
   253                           
   254  01CA  21C6  120A  118A   	fcall	init_fetch0
   255  01CD  0080               	movwf	0
   256  01CE  0A84               	incf	4,f
   257  01CF  0804               	movf	4,w
   258  01D0  067D               	xorwf	125,w
   259  01D1  1903               	btfsc	3,2
   260  01D2  3400               	retlw	0
   261  01D3  0AFF               	incf	127,f
   262  01D4  1903               	btfsc	3,2
   263  01D5  0AFE               	incf	126,f
   264  01D6  29CA               	goto	init_ram0
   265                           
   266                           	psect	cstackBANK1
   267  00A0                     __pcstackBANK1:	
   268  00A0                     ??_main:	
   269                           
   270                           ; 0 bytes @ 0x0
   271  00A0                     	ds	1
   272                           
   273                           	psect	cstackCOMMON
   274  0076                     __pcstackCOMMON:	
   275  0076                     ?_incrementDutyCycle:	
   276  0076                     ?_pseudocode:	
   277                           ; 0 bytes @ 0x0
   278                           
   279  0076                     ?_incrementFrequency:	
   280                           ; 0 bytes @ 0x0
   281                           
   282  0076                     ?_ISR:	
   283                           ; 0 bytes @ 0x0
   284                           
   285  0076                     ??_ISR:	
   286                           ; 0 bytes @ 0x0
   287                           
   288  0076                     ?_debounce:	
   289                           ; 0 bytes @ 0x0
   290                           
   291  0076                     ?_main:	
   292                           ; 0 bytes @ 0x0
   293                           
   294                           
   295                           ; 0 bytes @ 0x0
   296  0076                     	ds	6
   297                           
   298                           	psect	cstackBANK0
   299  006E                     __pcstackBANK0:	
   300  006E                     ??_incrementDutyCycle:	
   301  006E                     ??_pseudocode:	
   302                           ; 0 bytes @ 0x0
   303                           
   304  006E                     ??_incrementFrequency:	
   305                           ; 0 bytes @ 0x0
   306                           
   307  006E                     ??_debounce:	
   308                           ; 0 bytes @ 0x0
   309                           
   310  006E                     debounce@i:	
   311                           ; 0 bytes @ 0x0
   312                           
   313                           
   314                           ; 2 bytes @ 0x0
   315  006E                     	ds	2
   316                           
   317                           	psect	maintext
   318  019A                     __pmaintext:	
   319 ;;
   320 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   321 ;;
   322 ;; *************** function _main *****************
   323 ;; Defined at:
   324 ;;		line 104 in file "C:\Users\notjo\OneDrive\Desktop\USC\USC-Year3-Sem2\3201-EmbeddedSystems\Labs\LE_04\LE4-7\LE4-7.c"
   325 ;; Parameters:    Size  Location     Type
   326 ;;		None
   327 ;; Auto vars:     Size  Location     Type
   328 ;;		None
   329 ;; Return value:  Size  Location     Type
   330 ;;		None               void
   331 ;; Registers used:
   332 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   333 ;; Tracked objects:
   334 ;;		On entry : 17F/0
   335 ;;		On exit  : 0/0
   336 ;;		Unchanged: 0/0
   337 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   338 ;;      Params:         0       0       0       0       0
   339 ;;      Locals:         0       0       0       0       0
   340 ;;      Temps:          0       0       1       0       0
   341 ;;      Totals:         0       0       1       0       0
   342 ;;Total ram usage:        1 bytes
   343 ;; Hardware stack levels required when called:    3
   344 ;; This function calls:
   345 ;;		_debounce
   346 ;; This function is called by:
   347 ;;		Startup code after reset
   348 ;; This function uses a non-reentrant model
   349 ;;
   350                           
   351                           
   352                           ;psect for function _main
   353  019A                     _main:	
   354                           
   355                           ;LE4-7.c: 106: ADCON1 = 0x06;
   356                           
   357                           ;incstack = 0
   358                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   359  019A  3006               	movlw	6
   360  019B  1683               	bsf	3,5	;RP0=1, select bank1
   361  019C  1303               	bcf	3,6	;RP1=0, select bank1
   362  019D  009F               	movwf	31	;volatile
   363                           
   364                           ;LE4-7.c: 107: TRISA = 0x00;
   365  019E  0185               	clrf	5	;volatile
   366                           
   367                           ;LE4-7.c: 108: T1CON = 0x30;
   368  019F  3030               	movlw	48
   369  01A0  1283               	bcf	3,5	;RP0=0, select bank0
   370  01A1  1303               	bcf	3,6	;RP1=0, select bank0
   371  01A2  0090               	movwf	16	;volatile
   372                           
   373                           ;LE4-7.c: 109: TMR1IE = 1;
   374  01A3  1683               	bsf	3,5	;RP0=1, select bank1
   375  01A4  1303               	bcf	3,6	;RP1=0, select bank1
   376  01A5  140C               	bsf	12,0	;volatile
   377                           
   378                           ;LE4-7.c: 110: TMR1IF = 0;
   379  01A6  1283               	bcf	3,5	;RP0=0, select bank0
   380  01A7  1303               	bcf	3,6	;RP1=0, select bank0
   381  01A8  100C               	bcf	12,0	;volatile
   382                           
   383                           ;LE4-7.c: 111: PEIE = 1;
   384  01A9  170B               	bsf	11,6	;volatile
   385                           
   386                           ;LE4-7.c: 112: GIE = 1;
   387  01AA  178B               	bsf	11,7	;volatile
   388                           
   389                           ;LE4-7.c: 114: RA0 = 0;
   390  01AB  1005               	bcf	5,0	;volatile
   391                           
   392                           ;LE4-7.c: 115: TMR1 = maxCountDC1[maxCountIndex1];
   393  01AC  0874               	movf	_maxCountIndex1,w
   394  01AD  1683               	bsf	3,5	;RP0=1, select bank1
   395  01AE  1303               	bcf	3,6	;RP1=0, select bank1
   396  01AF  00A0               	movwf	??_main^(0+128)
   397  01B0  0720               	addwf	??_main^(0+128),w
   398  01B1  3E20               	addlw	_maxCountDC1& (0+255)
   399  01B2  0084               	movwf	4
   400  01B3  1383               	bcf	3,7	;select IRP bank0
   401  01B4  0800               	movf	0,w
   402  01B5  1283               	bcf	3,5	;RP0=0, select bank0
   403  01B6  1303               	bcf	3,6	;RP1=0, select bank0
   404  01B7  008E               	movwf	14	;volatile
   405  01B8  0A84               	incf	4,f
   406  01B9  0800               	movf	0,w
   407  01BA  008F               	movwf	15	;volatile
   408                           
   409                           ;LE4-7.c: 116: TMR1ON = 1;
   410  01BB  1410               	bsf	16,0	;volatile
   411                           
   412                           ;LE4-7.c: 119: TRISD = 0xFF;
   413  01BC  30FF               	movlw	255
   414  01BD  1683               	bsf	3,5	;RP0=1, select bank1
   415  01BE  1303               	bcf	3,6	;RP1=0, select bank1
   416  01BF  0088               	movwf	8	;volatile
   417  01C0                     l1175:	
   418                           ;LE4-7.c: 120: for(;;)
   419                           
   420                           
   421                           ;LE4-7.c: 121: {
   422                           ;LE4-7.c: 122: debounce();
   423  01C0  120A  118A  212F  120A  118A  	fcall	_debounce
   424                           
   425                           ;LE4-7.c: 123: }
   426  01C5  29C0               	goto	l1175
   427  01C6                     __end_of_main:	
   428                           
   429                           	psect	text1
   430  012F                     __ptext1:	
   431 ;; *************** function _debounce *****************
   432 ;; Defined at:
   433 ;;		line 85 in file "C:\Users\notjo\OneDrive\Desktop\USC\USC-Year3-Sem2\3201-EmbeddedSystems\Labs\LE_04\LE4-7\LE4-7.c"
   434 ;; Parameters:    Size  Location     Type
   435 ;;		None
   436 ;; Auto vars:     Size  Location     Type
   437 ;;  i               2    0[BANK0 ] int 
   438 ;; Return value:  Size  Location     Type
   439 ;;		None               void
   440 ;; Registers used:
   441 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   442 ;; Tracked objects:
   443 ;;		On entry : 0/0
   444 ;;		On exit  : 0/0
   445 ;;		Unchanged: 0/0
   446 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   447 ;;      Params:         0       0       0       0       0
   448 ;;      Locals:         0       2       0       0       0
   449 ;;      Temps:          0       0       0       0       0
   450 ;;      Totals:         0       2       0       0       0
   451 ;;Total ram usage:        2 bytes
   452 ;; Hardware stack levels used:    1
   453 ;; Hardware stack levels required when called:    2
   454 ;; This function calls:
   455 ;;		_incrementDutyCycle
   456 ;;		_incrementFrequency
   457 ;;		_pseudocode
   458 ;; This function is called by:
   459 ;;		_main
   460 ;; This function uses a non-reentrant model
   461 ;;
   462                           
   463                           
   464                           ;psect for function _debounce
   465  012F                     _debounce:	
   466  012F                     l57:	
   467                           ;LE4-7.c: 87: while(RD0 == 1 || RD1 == 1)
   468                           
   469                           ;incstack = 0
   470                           ; Regs used in _debounce: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   471                           
   472  012F  1283               	bcf	3,5	;RP0=0, select bank0
   473  0130  1303               	bcf	3,6	;RP1=0, select bank0
   474  0131  1C08               	btfss	8,0	;volatile
   475  0132  2965               	goto	l1151
   476  0133                     l58:	
   477                           
   478                           ;LE4-7.c: 88: {
   479                           ;LE4-7.c: 89: if(RD0 == 1)
   480  0133  1C08               	btfss	8,0	;volatile
   481  0134  293F               	goto	l1135
   482                           
   483                           ;LE4-7.c: 90: {
   484                           ;LE4-7.c: 91: incrementDutyCycle();
   485  0135  120A  118A  21E6  120A  118A  	fcall	_incrementDutyCycle
   486                           
   487                           ;LE4-7.c: 92: pseudocode();
   488  013A  120A  118A  202B  120A  118A  	fcall	_pseudocode
   489  013F                     l1135:	
   490                           
   491                           ;LE4-7.c: 93: }
   492                           ;LE4-7.c: 94: if(RD1 == 1)
   493  013F  1283               	bcf	3,5	;RP0=0, select bank0
   494  0140  1303               	bcf	3,6	;RP1=0, select bank0
   495  0141  1C88               	btfss	8,1	;volatile
   496  0142  294D               	goto	l1141
   497                           
   498                           ;LE4-7.c: 95: {
   499                           ;LE4-7.c: 96: incrementFrequency();
   500  0143  120A  118A  21D7  120A  118A  	fcall	_incrementFrequency
   501                           
   502                           ;LE4-7.c: 97: pseudocode();
   503  0148  120A  118A  202B  120A  118A  	fcall	_pseudocode
   504  014D                     l1141:	
   505                           
   506                           ;LE4-7.c: 98: }
   507                           ;LE4-7.c: 99: for(int i = 0; i < 10000; i++);
   508  014D  1283               	bcf	3,5	;RP0=0, select bank0
   509  014E  1303               	bcf	3,6	;RP1=0, select bank0
   510  014F  01EE               	clrf	debounce@i
   511  0150  01EF               	clrf	debounce@i+1
   512  0151                     L1:	
   513  0151  086F               	movf	debounce@i+1,w
   514  0152  3A80               	xorlw	128
   515  0153  00FF               	movwf	127
   516  0154  30A7               	movlw	167
   517  0155  027F               	subwf	127,w
   518  0156  1D03               	skipz
   519  0157  295A               	goto	u175
   520  0158  3010               	movlw	16
   521  0159  026E               	subwf	debounce@i,w
   522  015A                     u175:	
   523  015A  1803               	btfsc	3,0
   524  015B  292F               	goto	l57
   525  015C  3001               	movlw	1
   526  015D  1283               	bcf	3,5	;RP0=0, select bank0
   527  015E  1303               	bcf	3,6	;RP1=0, select bank0
   528  015F  07EE               	addwf	debounce@i,f
   529  0160  1803               	skipnc
   530  0161  0AEF               	incf	debounce@i+1,f
   531  0162  3000               	movlw	0
   532  0163  07EF               	addwf	debounce@i+1,f
   533  0164  2951               	goto	L1
   534  0165                     l1151:	
   535  0165  1C88               	btfss	8,1	;volatile
   536  0166  0008               	return
   537  0167  2933               	goto	l58
   538  0168                     __end_of_debounce:	
   539                           
   540                           	psect	text2
   541  002B                     __ptext2:	
   542 ;; *************** function _pseudocode *****************
   543 ;; Defined at:
   544 ;;		line 128 in file "C:\Users\notjo\OneDrive\Desktop\USC\USC-Year3-Sem2\3201-EmbeddedSystems\Labs\LE_04\LE4-7\LE4-7.c"
   545 ;; Parameters:    Size  Location     Type
   546 ;;		None
   547 ;; Auto vars:     Size  Location     Type
   548 ;;		None
   549 ;; Return value:  Size  Location     Type
   550 ;;		None               void
   551 ;; Registers used:
   552 ;;		wreg, fsr0l, fsr0h, status,2, status,0
   553 ;; Tracked objects:
   554 ;;		On entry : 0/0
   555 ;;		On exit  : 0/0
   556 ;;		Unchanged: 0/0
   557 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   558 ;;      Params:         0       0       0       0       0
   559 ;;      Locals:         0       0       0       0       0
   560 ;;      Temps:          0       0       0       0       0
   561 ;;      Totals:         0       0       0       0       0
   562 ;;Total ram usage:        0 bytes
   563 ;; Hardware stack levels used:    1
   564 ;; Hardware stack levels required when called:    1
   565 ;; This function calls:
   566 ;;		Nothing
   567 ;; This function is called by:
   568 ;;		_debounce
   569 ;; This function uses a non-reentrant model
   570 ;;
   571                           
   572                           
   573                           ;psect for function _pseudocode
   574  002B                     _pseudocode:	
   575                           
   576                           ;LE4-7.c: 130: switch(dutyCycleIndex)
   577                           
   578                           ;incstack = 0
   579                           ; Regs used in _pseudocode: [wreg-fsr0h+status,2+status,0]
   580  002B  28CA               	goto	l1097
   581  002C                     l1033:	
   582                           ;LE4-7.c: 134: {
   583                           ;LE4-7.c: 135: case 0:
   584                           
   585                           ;LE4-7.c: 133: switch(frequencyIndex)
   586                           
   587                           ;LE4-7.c: 131: {
   588                           ;LE4-7.c: 132: case 0:
   589                           
   590                           
   591                           ;LE4-7.c: 136: maxCountIndex1 = 0;
   592  002C  01F4               	clrf	_maxCountIndex1
   593  002D  01F5               	clrf	_maxCountIndex1+1
   594                           
   595                           ;LE4-7.c: 137: break;
   596  002E  0008               	return
   597  002F                     l1035:	
   598                           ;LE4-7.c: 138: case 1:
   599                           
   600                           
   601                           ;LE4-7.c: 139: maxCountIndex1 = 1;
   602  002F  3001               	movlw	1
   603  0030  00F4               	movwf	_maxCountIndex1
   604  0031  3000               	movlw	0
   605  0032  00F5               	movwf	_maxCountIndex1+1
   606                           
   607                           ;LE4-7.c: 140: break;
   608  0033  0008               	return
   609  0034                     l1037:	
   610                           ;LE4-7.c: 141: case 2:
   611                           
   612                           
   613                           ;LE4-7.c: 142: maxCountIndex1 = 2;
   614  0034  3002               	movlw	2
   615  0035  00F4               	movwf	_maxCountIndex1
   616  0036  3000               	movlw	0
   617  0037  00F5               	movwf	_maxCountIndex1+1
   618                           
   619                           ;LE4-7.c: 147: }
   620                           
   621                           ;LE4-7.c: 146: break;
   622                           
   623                           ;LE4-7.c: 145: return;
   624                           
   625                           ;LE4-7.c: 144: default:
   626                           
   627                           ;LE4-7.c: 143: break;
   628  0038  0008               	return
   629  0039                     l1043:	
   630                           
   631                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   632                           ; Switch size 1, requested type "space"
   633                           ; Number of cases is 1, Range of values is 0 to 0
   634                           ; switch strategies available:
   635                           ; Name         Instructions Cycles
   636                           ; simple_byte            4     3 (average)
   637                           ; direct_byte           11     8 (fixed)
   638                           ; jumptable            260     6 (fixed)
   639                           ;	Chosen strategy is simple_byte
   640  0039  0873               	movf	_frequencyIndex+1,w
   641  003A  3A00               	xorlw	0	; case 0
   642  003B  1903               	skipnz
   643  003C  283E               	goto	l1297
   644  003D  28E0               	goto	l80
   645  003E                     l1297:	
   646                           
   647                           ; Switch size 1, requested type "space"
   648                           ; Number of cases is 3, Range of values is 0 to 2
   649                           ; switch strategies available:
   650                           ; Name         Instructions Cycles
   651                           ; simple_byte           10     6 (average)
   652                           ; direct_byte           17     8 (fixed)
   653                           ; jumptable            260     6 (fixed)
   654                           ;	Chosen strategy is simple_byte
   655  003E  0872               	movf	_frequencyIndex,w
   656  003F  3A00               	xorlw	0	; case 0
   657  0040  1903               	skipnz
   658  0041  282C               	goto	l1033
   659  0042  3A01               	xorlw	1	; case 1
   660  0043  1903               	skipnz
   661  0044  282F               	goto	l1035
   662  0045  3A03               	xorlw	3	; case 2
   663  0046  1903               	skipnz
   664  0047  2834               	goto	l1037
   665  0048  28E0               	goto	l80
   666                           
   667                           ;LE4-7.c: 148: break;
   668  0049  0008               	return
   669  004A                     l1045:	
   670                           ;LE4-7.c: 151: {
   671                           ;LE4-7.c: 152: case 0:
   672                           
   673                           ;LE4-7.c: 150: switch(frequencyIndex)
   674                           
   675                           ;LE4-7.c: 149: case 1:
   676                           
   677                           
   678                           ;LE4-7.c: 153: maxCountIndex1 = 3;
   679  004A  3003               	movlw	3
   680  004B  00F4               	movwf	_maxCountIndex1
   681  004C  3000               	movlw	0
   682  004D  00F5               	movwf	_maxCountIndex1+1
   683                           
   684                           ;LE4-7.c: 154: break;
   685  004E  0008               	return
   686  004F                     l1047:	
   687                           ;LE4-7.c: 155: case 1:
   688                           
   689                           
   690                           ;LE4-7.c: 156: maxCountIndex1 = 4;
   691  004F  3004               	movlw	4
   692  0050  00F4               	movwf	_maxCountIndex1
   693  0051  3000               	movlw	0
   694  0052  00F5               	movwf	_maxCountIndex1+1
   695                           
   696                           ;LE4-7.c: 157: break;
   697  0053  0008               	return
   698  0054                     l1049:	
   699                           ;LE4-7.c: 158: case 2:
   700                           
   701                           
   702                           ;LE4-7.c: 159: maxCountIndex1 = 5;
   703  0054  3005               	movlw	5
   704  0055  00F4               	movwf	_maxCountIndex1
   705  0056  3000               	movlw	0
   706  0057  00F5               	movwf	_maxCountIndex1+1
   707                           
   708                           ;LE4-7.c: 164: }
   709                           
   710                           ;LE4-7.c: 163: break;
   711                           
   712                           ;LE4-7.c: 162: return;
   713                           
   714                           ;LE4-7.c: 161: default:
   715                           
   716                           ;LE4-7.c: 160: break;
   717  0058  0008               	return
   718  0059                     l1055:	
   719                           
   720                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   721                           ; Switch size 1, requested type "space"
   722                           ; Number of cases is 1, Range of values is 0 to 0
   723                           ; switch strategies available:
   724                           ; Name         Instructions Cycles
   725                           ; simple_byte            4     3 (average)
   726                           ; direct_byte           11     8 (fixed)
   727                           ; jumptable            260     6 (fixed)
   728                           ;	Chosen strategy is simple_byte
   729  0059  0873               	movf	_frequencyIndex+1,w
   730  005A  3A00               	xorlw	0	; case 0
   731  005B  1903               	skipnz
   732  005C  285E               	goto	l1299
   733  005D  28E0               	goto	l80
   734  005E                     l1299:	
   735                           
   736                           ; Switch size 1, requested type "space"
   737                           ; Number of cases is 3, Range of values is 0 to 2
   738                           ; switch strategies available:
   739                           ; Name         Instructions Cycles
   740                           ; simple_byte           10     6 (average)
   741                           ; direct_byte           17     8 (fixed)
   742                           ; jumptable            260     6 (fixed)
   743                           ;	Chosen strategy is simple_byte
   744  005E  0872               	movf	_frequencyIndex,w
   745  005F  3A00               	xorlw	0	; case 0
   746  0060  1903               	skipnz
   747  0061  284A               	goto	l1045
   748  0062  3A01               	xorlw	1	; case 1
   749  0063  1903               	skipnz
   750  0064  284F               	goto	l1047
   751  0065  3A03               	xorlw	3	; case 2
   752  0066  1903               	skipnz
   753  0067  2854               	goto	l1049
   754  0068  28E0               	goto	l80
   755                           
   756                           ;LE4-7.c: 165: break;
   757  0069  0008               	return
   758  006A                     l1057:	
   759                           ;LE4-7.c: 168: {
   760                           ;LE4-7.c: 169: case 0:
   761                           
   762                           ;LE4-7.c: 167: switch(frequencyIndex)
   763                           
   764                           ;LE4-7.c: 166: case 2:
   765                           
   766                           
   767                           ;LE4-7.c: 170: maxCountIndex1 = 6;
   768  006A  3006               	movlw	6
   769  006B  00F4               	movwf	_maxCountIndex1
   770  006C  3000               	movlw	0
   771  006D  00F5               	movwf	_maxCountIndex1+1
   772                           
   773                           ;LE4-7.c: 171: break;
   774  006E  0008               	return
   775  006F                     l1059:	
   776                           ;LE4-7.c: 172: case 1:
   777                           
   778                           
   779                           ;LE4-7.c: 173: maxCountIndex1 = 7;
   780  006F  3007               	movlw	7
   781  0070  00F4               	movwf	_maxCountIndex1
   782  0071  3000               	movlw	0
   783  0072  00F5               	movwf	_maxCountIndex1+1
   784                           
   785                           ;LE4-7.c: 174: break;
   786  0073  0008               	return
   787  0074                     l1061:	
   788                           ;LE4-7.c: 175: case 2:
   789                           
   790                           
   791                           ;LE4-7.c: 176: maxCountIndex1 = 8;
   792  0074  3008               	movlw	8
   793  0075  00F4               	movwf	_maxCountIndex1
   794  0076  3000               	movlw	0
   795  0077  00F5               	movwf	_maxCountIndex1+1
   796                           
   797                           ;LE4-7.c: 181: }
   798                           
   799                           ;LE4-7.c: 180: break;
   800                           
   801                           ;LE4-7.c: 179: return;
   802                           
   803                           ;LE4-7.c: 178: default:
   804                           
   805                           ;LE4-7.c: 177: break;
   806  0078  0008               	return
   807  0079                     l1067:	
   808                           
   809                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   810                           ; Switch size 1, requested type "space"
   811                           ; Number of cases is 1, Range of values is 0 to 0
   812                           ; switch strategies available:
   813                           ; Name         Instructions Cycles
   814                           ; simple_byte            4     3 (average)
   815                           ; direct_byte           11     8 (fixed)
   816                           ; jumptable            260     6 (fixed)
   817                           ;	Chosen strategy is simple_byte
   818  0079  0873               	movf	_frequencyIndex+1,w
   819  007A  3A00               	xorlw	0	; case 0
   820  007B  1903               	skipnz
   821  007C  287E               	goto	l1301
   822  007D  28E0               	goto	l80
   823  007E                     l1301:	
   824                           
   825                           ; Switch size 1, requested type "space"
   826                           ; Number of cases is 3, Range of values is 0 to 2
   827                           ; switch strategies available:
   828                           ; Name         Instructions Cycles
   829                           ; simple_byte           10     6 (average)
   830                           ; direct_byte           17     8 (fixed)
   831                           ; jumptable            260     6 (fixed)
   832                           ;	Chosen strategy is simple_byte
   833  007E  0872               	movf	_frequencyIndex,w
   834  007F  3A00               	xorlw	0	; case 0
   835  0080  1903               	skipnz
   836  0081  286A               	goto	l1057
   837  0082  3A01               	xorlw	1	; case 1
   838  0083  1903               	skipnz
   839  0084  286F               	goto	l1059
   840  0085  3A03               	xorlw	3	; case 2
   841  0086  1903               	skipnz
   842  0087  2874               	goto	l1061
   843  0088  28E0               	goto	l80
   844                           
   845                           ;LE4-7.c: 182: break;
   846  0089  0008               	return
   847  008A                     l1069:	
   848                           ;LE4-7.c: 185: {
   849                           ;LE4-7.c: 186: case 0:
   850                           
   851                           ;LE4-7.c: 184: switch(frequencyIndex)
   852                           
   853                           ;LE4-7.c: 183: case 3:
   854                           
   855                           
   856                           ;LE4-7.c: 187: maxCountIndex1 = 9;
   857  008A  3009               	movlw	9
   858  008B  00F4               	movwf	_maxCountIndex1
   859  008C  3000               	movlw	0
   860  008D  00F5               	movwf	_maxCountIndex1+1
   861                           
   862                           ;LE4-7.c: 188: break;
   863  008E  0008               	return
   864  008F                     l1071:	
   865                           ;LE4-7.c: 189: case 1:
   866                           
   867                           
   868                           ;LE4-7.c: 190: maxCountIndex1 = 10;
   869  008F  300A               	movlw	10
   870  0090  00F4               	movwf	_maxCountIndex1
   871  0091  3000               	movlw	0
   872  0092  00F5               	movwf	_maxCountIndex1+1
   873                           
   874                           ;LE4-7.c: 191: break;
   875  0093  0008               	return
   876  0094                     l1073:	
   877                           ;LE4-7.c: 192: case 2:
   878                           
   879                           
   880                           ;LE4-7.c: 193: maxCountIndex1 = 11;
   881  0094  300B               	movlw	11
   882  0095  00F4               	movwf	_maxCountIndex1
   883  0096  3000               	movlw	0
   884  0097  00F5               	movwf	_maxCountIndex1+1
   885                           
   886                           ;LE4-7.c: 198: }
   887                           
   888                           ;LE4-7.c: 197: break;
   889                           
   890                           ;LE4-7.c: 196: return;
   891                           
   892                           ;LE4-7.c: 195: default:
   893                           
   894                           ;LE4-7.c: 194: break;
   895  0098  0008               	return
   896  0099                     l1079:	
   897                           
   898                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   899                           ; Switch size 1, requested type "space"
   900                           ; Number of cases is 1, Range of values is 0 to 0
   901                           ; switch strategies available:
   902                           ; Name         Instructions Cycles
   903                           ; simple_byte            4     3 (average)
   904                           ; direct_byte           11     8 (fixed)
   905                           ; jumptable            260     6 (fixed)
   906                           ;	Chosen strategy is simple_byte
   907  0099  0873               	movf	_frequencyIndex+1,w
   908  009A  3A00               	xorlw	0	; case 0
   909  009B  1903               	skipnz
   910  009C  289E               	goto	l1303
   911  009D  28E0               	goto	l80
   912  009E                     l1303:	
   913                           
   914                           ; Switch size 1, requested type "space"
   915                           ; Number of cases is 3, Range of values is 0 to 2
   916                           ; switch strategies available:
   917                           ; Name         Instructions Cycles
   918                           ; simple_byte           10     6 (average)
   919                           ; direct_byte           17     8 (fixed)
   920                           ; jumptable            260     6 (fixed)
   921                           ;	Chosen strategy is simple_byte
   922  009E  0872               	movf	_frequencyIndex,w
   923  009F  3A00               	xorlw	0	; case 0
   924  00A0  1903               	skipnz
   925  00A1  288A               	goto	l1069
   926  00A2  3A01               	xorlw	1	; case 1
   927  00A3  1903               	skipnz
   928  00A4  288F               	goto	l1071
   929  00A5  3A03               	xorlw	3	; case 2
   930  00A6  1903               	skipnz
   931  00A7  2894               	goto	l1073
   932  00A8  28E0               	goto	l80
   933                           
   934                           ;LE4-7.c: 199: break;
   935  00A9  0008               	return
   936  00AA                     l1081:	
   937                           ;LE4-7.c: 202: {
   938                           ;LE4-7.c: 203: case 0:
   939                           
   940                           ;LE4-7.c: 201: switch(frequencyIndex)
   941                           
   942                           ;LE4-7.c: 200: case 4:
   943                           
   944                           
   945                           ;LE4-7.c: 204: maxCountIndex1 = 12;
   946  00AA  300C               	movlw	12
   947  00AB  00F4               	movwf	_maxCountIndex1
   948  00AC  3000               	movlw	0
   949  00AD  00F5               	movwf	_maxCountIndex1+1
   950                           
   951                           ;LE4-7.c: 205: break;
   952  00AE  0008               	return
   953  00AF                     l1083:	
   954                           ;LE4-7.c: 206: case 1:
   955                           
   956                           
   957                           ;LE4-7.c: 207: maxCountIndex1 = 13;
   958  00AF  300D               	movlw	13
   959  00B0  00F4               	movwf	_maxCountIndex1
   960  00B1  3000               	movlw	0
   961  00B2  00F5               	movwf	_maxCountIndex1+1
   962                           
   963                           ;LE4-7.c: 208: break;
   964  00B3  0008               	return
   965  00B4                     l1085:	
   966                           ;LE4-7.c: 209: case 2:
   967                           
   968                           
   969                           ;LE4-7.c: 210: maxCountIndex1 = 14;
   970  00B4  300E               	movlw	14
   971  00B5  00F4               	movwf	_maxCountIndex1
   972  00B6  3000               	movlw	0
   973  00B7  00F5               	movwf	_maxCountIndex1+1
   974                           
   975                           ;LE4-7.c: 215: }
   976                           
   977                           ;LE4-7.c: 214: break;
   978                           
   979                           ;LE4-7.c: 213: return;
   980                           
   981                           ;LE4-7.c: 212: default:
   982                           
   983                           ;LE4-7.c: 211: break;
   984  00B8  0008               	return
   985  00B9                     l1091:	
   986                           
   987                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   988                           ; Switch size 1, requested type "space"
   989                           ; Number of cases is 1, Range of values is 0 to 0
   990                           ; switch strategies available:
   991                           ; Name         Instructions Cycles
   992                           ; simple_byte            4     3 (average)
   993                           ; direct_byte           11     8 (fixed)
   994                           ; jumptable            260     6 (fixed)
   995                           ;	Chosen strategy is simple_byte
   996  00B9  0873               	movf	_frequencyIndex+1,w
   997  00BA  3A00               	xorlw	0	; case 0
   998  00BB  1903               	skipnz
   999  00BC  28BE               	goto	l1305
  1000  00BD  28E0               	goto	l80
  1001  00BE                     l1305:	
  1002                           
  1003                           ; Switch size 1, requested type "space"
  1004                           ; Number of cases is 3, Range of values is 0 to 2
  1005                           ; switch strategies available:
  1006                           ; Name         Instructions Cycles
  1007                           ; simple_byte           10     6 (average)
  1008                           ; direct_byte           17     8 (fixed)
  1009                           ; jumptable            260     6 (fixed)
  1010                           ;	Chosen strategy is simple_byte
  1011  00BE  0872               	movf	_frequencyIndex,w
  1012  00BF  3A00               	xorlw	0	; case 0
  1013  00C0  1903               	skipnz
  1014  00C1  28AA               	goto	l1081
  1015  00C2  3A01               	xorlw	1	; case 1
  1016  00C3  1903               	skipnz
  1017  00C4  28AF               	goto	l1083
  1018  00C5  3A03               	xorlw	3	; case 2
  1019  00C6  1903               	skipnz
  1020  00C7  28B4               	goto	l1085
  1021  00C8  28E0               	goto	l80
  1022                           
  1023                           ;LE4-7.c: 220: }
  1024                           
  1025                           ;LE4-7.c: 219: break;
  1026                           
  1027                           ;LE4-7.c: 218: return;
  1028                           
  1029                           ;LE4-7.c: 217: default:
  1030                           
  1031                           ;LE4-7.c: 216: break;
  1032  00C9  0008               	return
  1033  00CA                     l1097:	
  1034                           
  1035                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1036                           ; Switch size 1, requested type "space"
  1037                           ; Number of cases is 1, Range of values is 0 to 0
  1038                           ; switch strategies available:
  1039                           ; Name         Instructions Cycles
  1040                           ; simple_byte            4     3 (average)
  1041                           ; direct_byte           11     8 (fixed)
  1042                           ; jumptable            260     6 (fixed)
  1043                           ;	Chosen strategy is simple_byte
  1044  00CA  0871               	movf	_dutyCycleIndex+1,w
  1045  00CB  3A00               	xorlw	0	; case 0
  1046  00CC  1903               	skipnz
  1047  00CD  28CF               	goto	l1307
  1048  00CE  28E0               	goto	l80
  1049  00CF                     l1307:	
  1050                           
  1051                           ; Switch size 1, requested type "space"
  1052                           ; Number of cases is 5, Range of values is 0 to 4
  1053                           ; switch strategies available:
  1054                           ; Name         Instructions Cycles
  1055                           ; simple_byte           16     9 (average)
  1056                           ; direct_byte           23     8 (fixed)
  1057                           ; jumptable            260     6 (fixed)
  1058                           ;	Chosen strategy is simple_byte
  1059  00CF  0870               	movf	_dutyCycleIndex,w
  1060  00D0  3A00               	xorlw	0	; case 0
  1061  00D1  1903               	skipnz
  1062  00D2  2839               	goto	l1043
  1063  00D3  3A01               	xorlw	1	; case 1
  1064  00D4  1903               	skipnz
  1065  00D5  2859               	goto	l1055
  1066  00D6  3A03               	xorlw	3	; case 2
  1067  00D7  1903               	skipnz
  1068  00D8  2879               	goto	l1067
  1069  00D9  3A01               	xorlw	1	; case 3
  1070  00DA  1903               	skipnz
  1071  00DB  2899               	goto	l1079
  1072  00DC  3A07               	xorlw	7	; case 4
  1073  00DD  1903               	skipnz
  1074  00DE  28B9               	goto	l1091
  1075  00DF  28E0               	goto	l80
  1076  00E0                     l80:	
  1077  00E0  0008               	return
  1078  00E1                     __end_of_pseudocode:	
  1079                           
  1080                           	psect	text3
  1081  01D7                     __ptext3:	
  1082 ;; *************** function _incrementFrequency *****************
  1083 ;; Defined at:
  1084 ;;		line 230 in file "C:\Users\notjo\OneDrive\Desktop\USC\USC-Year3-Sem2\3201-EmbeddedSystems\Labs\LE_04\LE4-7\LE4-7.c"
  1085 ;; Parameters:    Size  Location     Type
  1086 ;;		None
  1087 ;; Auto vars:     Size  Location     Type
  1088 ;;		None
  1089 ;; Return value:  Size  Location     Type
  1090 ;;		None               void
  1091 ;; Registers used:
  1092 ;;		wreg, status,2
  1093 ;; Tracked objects:
  1094 ;;		On entry : 0/0
  1095 ;;		On exit  : 0/0
  1096 ;;		Unchanged: 0/0
  1097 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1098 ;;      Params:         0       0       0       0       0
  1099 ;;      Locals:         0       0       0       0       0
  1100 ;;      Temps:          0       0       0       0       0
  1101 ;;      Totals:         0       0       0       0       0
  1102 ;;Total ram usage:        0 bytes
  1103 ;; Hardware stack levels used:    1
  1104 ;; Hardware stack levels required when called:    1
  1105 ;; This function calls:
  1106 ;;		Nothing
  1107 ;; This function is called by:
  1108 ;;		_debounce
  1109 ;; This function uses a non-reentrant model
  1110 ;;
  1111                           
  1112                           
  1113                           ;psect for function _incrementFrequency
  1114  01D7                     _incrementFrequency:	
  1115                           
  1116                           ;LE4-7.c: 232: if(frequencyIndex == 2)
  1117                           
  1118                           ;incstack = 0
  1119                           ; Regs used in _incrementFrequency: [wreg+status,2]
  1120  01D7  3002               	movlw	2
  1121  01D8  0672               	xorwf	_frequencyIndex,w
  1122  01D9  0473               	iorwf	_frequencyIndex+1,w
  1123  01DA  1D03               	skipz
  1124  01DB  29DF               	goto	l1127
  1125                           
  1126                           ;LE4-7.c: 233: frequencyIndex = 0;
  1127  01DC  01F2               	clrf	_frequencyIndex
  1128  01DD  01F3               	clrf	_frequencyIndex+1
  1129  01DE  0008               	return
  1130  01DF                     l1127:	
  1131                           
  1132                           ;LE4-7.c: 234: else
  1133                           ;LE4-7.c: 235: frequencyIndex += 1;
  1134  01DF  3001               	movlw	1
  1135  01E0  07F2               	addwf	_frequencyIndex,f
  1136  01E1  1803               	skipnc
  1137  01E2  0AF3               	incf	_frequencyIndex+1,f
  1138  01E3  3000               	movlw	0
  1139  01E4  07F3               	addwf	_frequencyIndex+1,f
  1140  01E5  0008               	return
  1141  01E6                     __end_of_incrementFrequency:	
  1142                           
  1143                           	psect	text4
  1144  01E6                     __ptext4:	
  1145 ;; *************** function _incrementDutyCycle *****************
  1146 ;; Defined at:
  1147 ;;		line 222 in file "C:\Users\notjo\OneDrive\Desktop\USC\USC-Year3-Sem2\3201-EmbeddedSystems\Labs\LE_04\LE4-7\LE4-7.c"
  1148 ;; Parameters:    Size  Location     Type
  1149 ;;		None
  1150 ;; Auto vars:     Size  Location     Type
  1151 ;;		None
  1152 ;; Return value:  Size  Location     Type
  1153 ;;		None               void
  1154 ;; Registers used:
  1155 ;;		wreg, status,2
  1156 ;; Tracked objects:
  1157 ;;		On entry : 0/0
  1158 ;;		On exit  : 0/0
  1159 ;;		Unchanged: 0/0
  1160 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1161 ;;      Params:         0       0       0       0       0
  1162 ;;      Locals:         0       0       0       0       0
  1163 ;;      Temps:          0       0       0       0       0
  1164 ;;      Totals:         0       0       0       0       0
  1165 ;;Total ram usage:        0 bytes
  1166 ;; Hardware stack levels used:    1
  1167 ;; Hardware stack levels required when called:    1
  1168 ;; This function calls:
  1169 ;;		Nothing
  1170 ;; This function is called by:
  1171 ;;		_debounce
  1172 ;; This function uses a non-reentrant model
  1173 ;;
  1174                           
  1175                           
  1176                           ;psect for function _incrementDutyCycle
  1177  01E6                     _incrementDutyCycle:	
  1178                           
  1179                           ;LE4-7.c: 224: if(dutyCycleIndex == 4)
  1180                           
  1181                           ;incstack = 0
  1182                           ; Regs used in _incrementDutyCycle: [wreg+status,2]
  1183  01E6  3004               	movlw	4
  1184  01E7  0670               	xorwf	_dutyCycleIndex,w
  1185  01E8  0471               	iorwf	_dutyCycleIndex+1,w
  1186  01E9  1D03               	skipz
  1187  01EA  29EE               	goto	l1029
  1188                           
  1189                           ;LE4-7.c: 225: dutyCycleIndex = 0;
  1190  01EB  01F0               	clrf	_dutyCycleIndex
  1191  01EC  01F1               	clrf	_dutyCycleIndex+1
  1192  01ED  0008               	return
  1193  01EE                     l1029:	
  1194                           
  1195                           ;LE4-7.c: 226: else
  1196                           ;LE4-7.c: 227: dutyCycleIndex += 1;
  1197  01EE  3001               	movlw	1
  1198  01EF  07F0               	addwf	_dutyCycleIndex,f
  1199  01F0  1803               	skipnc
  1200  01F1  0AF1               	incf	_dutyCycleIndex+1,f
  1201  01F2  3000               	movlw	0
  1202  01F3  07F1               	addwf	_dutyCycleIndex+1,f
  1203  01F4  0008               	return
  1204  01F5                     __end_of_incrementDutyCycle:	
  1205                           
  1206                           	psect	text5
  1207  0168                     __ptext5:	
  1208 ;; *************** function _ISR *****************
  1209 ;; Defined at:
  1210 ;;		line 64 in file "C:\Users\notjo\OneDrive\Desktop\USC\USC-Year3-Sem2\3201-EmbeddedSystems\Labs\LE_04\LE4-7\LE4-7.c"
  1211 ;; Parameters:    Size  Location     Type
  1212 ;;		None
  1213 ;; Auto vars:     Size  Location     Type
  1214 ;;		None
  1215 ;; Return value:  Size  Location     Type
  1216 ;;		None               void
  1217 ;; Registers used:
  1218 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  1219 ;; Tracked objects:
  1220 ;;		On entry : 0/0
  1221 ;;		On exit  : 0/0
  1222 ;;		Unchanged: 0/0
  1223 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1224 ;;      Params:         0       0       0       0       0
  1225 ;;      Locals:         0       0       0       0       0
  1226 ;;      Temps:          6       0       0       0       0
  1227 ;;      Totals:         6       0       0       0       0
  1228 ;;Total ram usage:        6 bytes
  1229 ;; Hardware stack levels used:    1
  1230 ;; This function calls:
  1231 ;;		Nothing
  1232 ;; This function is called by:
  1233 ;;		Interrupt level 1
  1234 ;; This function uses a non-reentrant model
  1235 ;;
  1236                           
  1237                           
  1238                           ;psect for function _ISR
  1239  0168                     _ISR:	
  1240                           
  1241                           ;LE4-7.c: 66: GIE = 0;
  1242  0168  138B               	bcf	11,7	;volatile
  1243                           
  1244                           ;LE4-7.c: 67: if(TMR1IF==1)
  1245  0169  1C0C               	btfss	12,0	;volatile
  1246  016A  298E               	goto	i1l879
  1247                           
  1248                           ;LE4-7.c: 68: {
  1249                           ;LE4-7.c: 69: TMR1IF = 0;
  1250  016B  100C               	bcf	12,0	;volatile
  1251                           
  1252                           ;LE4-7.c: 70: if(flag != 1)
  1253  016C  3001               	movlw	1
  1254  016D  066C               	xorwf	_flag,w
  1255  016E  046D               	iorwf	_flag+1,w
  1256  016F  1903               	skipnz
  1257  0170  2976               	goto	i1l873
  1258                           
  1259                           ;LE4-7.c: 71: {
  1260                           ;LE4-7.c: 72: TMR1 = maxCountDC2[maxCountIndex1];
  1261  0171  0874               	movf	_maxCountIndex1,w
  1262  0172  00F6               	movwf	??_ISR
  1263  0173  0776               	addwf	??_ISR,w
  1264  0174  3E3E               	addlw	_maxCountDC2& (0+255)
  1265  0175  297A               	goto	L2
  1266  0176                     i1l873:	
  1267                           ;LE4-7.c: 73: }
  1268                           
  1269                           
  1270                           ;LE4-7.c: 74: else
  1271                           ;LE4-7.c: 75: {
  1272                           ;LE4-7.c: 76: TMR1 = maxCountDC1[maxCountIndex1];
  1273  0176  0874               	movf	_maxCountIndex1,w
  1274  0177  00F6               	movwf	??_ISR
  1275  0178  0776               	addwf	??_ISR,w
  1276  0179  3E20               	addlw	_maxCountDC1& (0+255)
  1277  017A                     L2:	
  1278  017A  0084               	movwf	4
  1279  017B  1383               	bcf	3,7	;select IRP bank0
  1280  017C  0800               	movf	0,w
  1281  017D  008E               	movwf	14	;volatile
  1282  017E  0A84               	incf	4,f
  1283  017F  0800               	movf	0,w
  1284  0180  008F               	movwf	15	;volatile
  1285                           
  1286                           ;LE4-7.c: 77: }
  1287                           ;LE4-7.c: 78: RA0 = RA0^1;
  1288  0181  3001               	movlw	1
  1289  0182  0685               	xorwf	5,f
  1290                           
  1291                           ;LE4-7.c: 79: flag = !flag;
  1292  0183  086D               	movf	_flag+1,w
  1293  0184  046C               	iorwf	_flag,w
  1294  0185  3000               	movlw	0
  1295  0186  1903               	skipnz
  1296  0187  3001               	movlw	1
  1297  0188  00F6               	movwf	??_ISR
  1298  0189  01F7               	clrf	??_ISR+1
  1299  018A  0876               	movf	??_ISR,w
  1300  018B  00EC               	movwf	_flag
  1301  018C  0877               	movf	??_ISR+1,w
  1302  018D  00ED               	movwf	_flag+1
  1303  018E                     i1l879:	
  1304                           
  1305                           ;LE4-7.c: 81: }
  1306                           ;LE4-7.c: 82: GIE = 1;
  1307  018E  178B               	bsf	11,7	;volatile
  1308  018F  087B               	movf	??_ISR+5,w
  1309  0190  00FF               	movwf	127
  1310  0191  087A               	movf	??_ISR+4,w
  1311  0192  008A               	movwf	10
  1312  0193  0879               	movf	??_ISR+3,w
  1313  0194  0084               	movwf	4
  1314  0195  0E78               	swapf	(??_ISR+2)^(0+-128),w
  1315  0196  0083               	movwf	3
  1316  0197  0EFE               	swapf	126,f
  1317  0198  0E7E               	swapf	126,w
  1318  0199  0009               	retfie
  1319  019A                     __end_of_ISR:	
  1320  007E                     btemp	set	126	;btemp
  1321  007E                     wtemp	set	126
  1322  007E                     wtemp0	set	126
  1323  0080                     wtemp1	set	128
  1324  0082                     wtemp2	set	130
  1325  0084                     wtemp3	set	132
  1326  0086                     wtemp4	set	134
  1327  0088                     wtemp5	set	136
  1328  007F                     wtemp6	set	127
  1329  007E                     ttemp	set	126
  1330  007E                     ttemp0	set	126
  1331  0081                     ttemp1	set	129
  1332  0084                     ttemp2	set	132
  1333  0087                     ttemp3	set	135
  1334  007F                     ttemp4	set	127
  1335  007E                     ltemp	set	126
  1336  007E                     ltemp0	set	126
  1337  0082                     ltemp1	set	130
  1338  0086                     ltemp2	set	134
  1339  0080                     ltemp3	set	128
  1340                           
  1341                           	psect	intentry
  1342  0004                     __pintentry:	
  1343                           ;incstack = 0
  1344                           ; Regs used in _ISR: [wreg-fsr0h+status,2+status,0]
  1345                           
  1346  0004                     interrupt_function:	
  1347  007E                     saved_w	set	btemp
  1348  0004  00FE               	movwf	btemp
  1349  0005  0E03               	swapf	3,w
  1350  0006  00F8               	movwf	??_ISR+2
  1351  0007  0804               	movf	4,w
  1352  0008  00F9               	movwf	??_ISR+3
  1353  0009  080A               	movf	10,w
  1354  000A  00FA               	movwf	??_ISR+4
  1355  000B  1283               	bcf	3,5	;RP0=0, select bank0
  1356  000C  1303               	bcf	3,6	;RP1=0, select bank0
  1357  000D  087F               	movf	btemp+1,w
  1358  000E  00FB               	movwf	??_ISR+5
  1359  000F  120A  118A  2968   	ljmp	_ISR


Data Sizes:
    Strings     0
    Constant    0
    Data        78
    BSS         6
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      6      12
    BANK0            80      2      80
    BANK1            80      1       1
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_debounce

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0      46
                                              0 BANK1      1     1      0
                           _debounce
 ---------------------------------------------------------------------------------
 (1) _debounce                                             2     2      0      46
                                              0 BANK0      2     2      0
                 _incrementDutyCycle
                 _incrementFrequency
                         _pseudocode
 ---------------------------------------------------------------------------------
 (2) _pseudocode                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _incrementFrequency                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _incrementDutyCycle                                   0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _ISR                                                  6     6      0       0
                                              0 COMMON     6     6      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _debounce
     _incrementDutyCycle
     _incrementFrequency
     _pseudocode

 _ISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      1       1       7        1.3%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50      2      50       5      100.0%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      6       C       1       85.7%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      5D      12        0.0%
ABS                  0      0      5D       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.33 build 59893 
Symbol Table                                                                                   Mon Mar 11 15:44:09 2024

                          pc 0002                  __CFG_CP$OFF 0000                           l80 00E0  
                         l57 012F                           l58 0133                           fsr 0004  
                        _GIE 005F                          _RA0 0028                          _RD0 0040  
                        _RD1 0041                          u175 015A                 __CFG_CPD$OFF 0000  
                        _ISR 0168                          fsr0 0004                          indf 0000  
               __CFG_FOSC$XT 0000                 __CFG_LVP$OFF 0000                         ?_ISR 0076  
                       l1033 002C                         l1035 002F                         l1043 0039  
                       l1029 01EE                         l1301 007E                         l1061 0074  
                       l1045 004A                         l1037 0034                         l1141 014D  
                       l1127 01DF                         l1303 009E                         l1071 008F  
                       l1047 004F                         l1055 0059                         l1151 0165  
                       l1135 013F                         l1305 00BE                         l1081 00AA  
                       l1073 0094                         l1057 006A                         l1049 0054  
                       l1307 00CF                         l1083 00AF                         l1091 00B9  
                       l1059 006F                         l1067 0079                         l1085 00B4  
                       l1069 008A                         l1079 0099                         l1175 01C0  
                       l1097 00CA                         l1297 003E                         l1299 005E  
                       _PEIE 005E                         _TMR1 000E                 __CFG_WRT$OFF 0000  
                       _flag 006C                         _main 019A                         btemp 007E  
              __CFG_BOREN$ON 0000                         ltemp 007E                         start 0012  
                       ttemp 007E                         wtemp 007E                        ??_ISR 0076  
                      ?_main 0076                __CFG_WDTE$OFF 0000                        _T1CON 0010  
                      i1l873 0176                        i1l879 018E                        _TRISA 0085  
                      _TRISD 0088                __CFG_PWRTE$ON 0000                        pclath 000A  
                      ltemp0 007E                        ltemp1 0082                        ltemp2 0086  
                      ltemp3 0080                        ttemp0 007E                        ttemp1 0081  
                      ttemp2 0084                        ttemp3 0087                        ttemp4 007F  
                      status 0003                        wtemp0 007E                        wtemp1 0080  
                      wtemp2 0082                        wtemp3 0084                        wtemp4 0086  
                      wtemp5 0088                        wtemp6 007F              __initialization 0015  
               __end_of_main 01C6               _maxCountIndex1 0074                       ??_main 00A0  
                     _ADCON1 009F                       _TMR1IE 0460                       _TMR1IF 0060  
                     _TMR1ON 0080             __end_of_debounce 0168                       saved_w 007E  
    __end_of__initialization 0027               __pcstackCOMMON 0076                 __pidataBANK0 00E1  
__size_of_incrementFrequency 000F  __size_of_incrementDutyCycle 000F                   __pmaintext 019A  
                 __pintentry 0004                    ?_debounce 0076                   _dutyCycles 005C  
                    __ptext1 012F                      __ptext2 002B                      __ptext3 01D7  
                    __ptext4 01E6                      __ptext5 0168                 __size_of_ISR 0032  
                 ??_debounce 006E         end_of_initialization 0027               _frequencyIndex 0072  
                 _pseudocode 002B          start_initialization 0015                  __end_of_ISR 019A  
                 init_fetch0 01C6                  __pdataBANK0 0020                  ?_pseudocode 0076  
                __pbssCOMMON 0070                    ___latbits 0002                __pcstackBANK0 006E  
              __pcstackBANK1 00A0            __size_of_debounce 0039   __end_of_incrementFrequency 01E6  
 __end_of_incrementDutyCycle 01F5               _dutyCycleIndex 0070                    debounce@i 006E  
          interrupt_function 0004          __size_of_pseudocode 00B6                  _maxCountDC1 0020  
                _maxCountDC2 003E                  _frequencies 0066                     _debounce 012F  
              __size_of_main 002C                 ??_pseudocode 006E                     init_ram0 01CA  
                   intlevel1 0000           __end_of_pseudocode 00E1           _incrementFrequency 01D7  
         _incrementDutyCycle 01E6          ?_incrementFrequency 0076          ?_incrementDutyCycle 0076  
       ??_incrementFrequency 006E         ??_incrementDutyCycle 006E  
